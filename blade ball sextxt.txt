-- Load required services
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:FindFirstChildOfClass("Humanoid")
local Alive = workspace:WaitForChild("Alive")
local Camera = workspace.CurrentCamera

-- Variables for remote events and parry control
local Remotes = {}
local Parry_Key = nil
local Parry_Data = nil
local Parry_Type = "Custom"
local Cooldown = 0
local IsParried = false
local Connection = nil
local IsAutoParryEnabled = false
local ParryRadius = 15
local PredictionTime = 0.1
local Parries = 0
local Last_Input = UserInputService:GetLastInputType()

-- Capture remotes via debug
task.spawn(function()
    for _, Value in pairs(getgc()) do
        if type(Value) == "function" and islclosure(Value) then
            if debug.getupvalues(Value) then
                local Protos = debug.getprotos(Value)
                local Upvalues = debug.getupvalues(Value)
                local Constants = debug.getconstants(Value)
                if #Protos == 4 and #Upvalues == 24 and #Constants == 104 then
                    Remotes[debug.getupvalue(Value, 16)] = debug.getconstant(Value, 62)
                    Parry_Key = debug.getupvalue(Value, 17)
                    Remotes[debug.getupvalue(Value, 18)] = debug.getconstant(Value, 64)
                    Remotes[debug.getupvalue(Value, 19)] = debug.getconstant(Value, 65)
                    break
                end
            end
        end
    end
end)

-- Utility to get the current valid Ball from workspace.Balls
local function GetBall()
    local balls = workspace:FindFirstChild("Balls")
    if not balls then return nil end
    for _, Ball in ipairs(balls:GetChildren()) do
        if Ball:GetAttribute("realBall") then
            return Ball
        end
    end
    return nil
end

local function ResetConnection()
    if Connection then
        Connection:Disconnect()
        Connection = nil
    end
end

-- Monitor new balls and reset parry state
if workspace:FindFirstChild("Balls") then
    workspace.Balls.ChildAdded:Connect(function()
        local Ball = GetBall()
        if not Ball then return end
        ResetConnection()
        Connection = Ball:GetAttributeChangedSignal("target"):Connect(function()
            IsParried = false
        end)
    end)
end

local function PredictBallPosition(Ball, TimeAhead)
    local Velocity = (Ball:FindFirstChild("zoomies") and Ball.zoomies.VectorVelocity) or Vector3.new(0, 0, 0)
    return Ball.Position + Velocity * TimeAhead
end

local function AutoParry()
    if not IsAutoParryEnabled then return end
    local Ball = GetBall()
    local Character = LocalPlayer.Character
    if not Ball or not Character then return end
    local HRP = Character:FindFirstChild("HumanoidRootPart")
    if not HRP then return end

    if Ball:GetAttribute("target") == LocalPlayer.Name and not IsParried then  
        local PredictedPosition = PredictBallPosition(Ball, PredictionTime)  
        local DistanceToPredicted = (HRP.Position - PredictedPosition).Magnitude  
        if DistanceToPredicted <= ParryRadius then  
            for Remote, Args in pairs(Remotes) do  
                Remote:FireServer(Args, Parry_Key, Parry_Data[1], Parry_Data[2], Parry_Data[3], Parry_Data[4])  
            end  
            IsParried = true  
            Cooldown = tick()
            Parries = Parries + 1
        end  
    end  
    if IsParried and (tick() - Cooldown) >= 1 then  
        IsParried = false  
    end
end

RunService.PreSimulation:Connect(AutoParry)

-- Update parry data based on selected curve type
local function updateParryData(parryType)
    local Vector3_Mouse_Location
    if Last_Input == Enum.UserInputType.MouseButton1 or
       Last_Input == Enum.UserInputType.MouseButton2 or
       Last_Input == Enum.UserInputType.Keyboard then
        local Mouse_Location = UserInputService:GetMouseLocation()
        Vector3_Mouse_Location = {Mouse_Location.X, Mouse_Location.Y}
    else
        Vector3_Mouse_Location = {Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2}
    end
    local Events = {}
    for _, v in pairs(Alive:GetChildren()) do
        if v:FindFirstChild("PrimaryPart") then
            Events[tostring(v)] = Camera:WorldToScreenPoint(v.PrimaryPart.Position)
        end
    end

    local data  
    if parryType == "Custom" then  
        data = {0, Camera.CFrame, Events, Vector3_Mouse_Location}  
    elseif parryType == "Backwards" then  
        data = {0, CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position - (Camera.CFrame.LookVector * 1000)), Events, Vector3_Mouse_Location}  
    elseif parryType == "Random" then  
        data = {0, CFrame.new(Camera.CFrame.Position, Vector3.new(math.random(-3000,3000), math.random(-3000,3000), math.random(-3000,3000))), Events, Vector3_Mouse_Location}  
    elseif parryType == "Straight" then  
        data = {0, CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + (Camera.CFrame.LookVector * 1000)), Events, Vector3_Mouse_Location}  
    elseif parryType == "Up" then  
        data = {0, CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + (Camera.CFrame.UpVector * 1000)), Events, Vector3_Mouse_Location}  
    elseif parryType == "Right" then  
        data = {0, CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + (Camera.CFrame.RightVector * 1000)), Events, Vector3_Mouse_Location}  
    elseif parryType == "Left" then  
        data = {0, CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position - (Camera.CFrame.RightVector * 1000)), Events, Vector3_Mouse_Location}  
    else  
        data = {0, Camera.CFrame, Events, Vector3_Mouse_Location}  
    end  

    Parry_Data = data
end

-- Initialize parry data
updateParryData(Parry_Type)

-- Remote event listeners
if ReplicatedStorage:FindFirstChild("Remotes") then
    if ReplicatedStorage.Remotes:FindFirstChild("ParrySuccess") then
        ReplicatedStorage.Remotes.ParrySuccess.OnClientEvent:Connect(function()
            if LocalPlayer.Character and LocalPlayer.Character.Parent ~= Alive then
                return
            end
        end)
    end

    if ReplicatedStorage.Remotes:FindFirstChild("ParrySuccessAll") then
        ReplicatedStorage.Remotes.ParrySuccessAll.OnClientEvent:Connect(function(_, root)
            if root and root.Parent and root.Parent ~= LocalPlayer.Character then
                if root.Parent.Parent ~= Alive then
                    return
                end
            end
        end)
    end
end

-- Create Custom UI
-- Remove any existing UI with the same name
if game.CoreGui:FindFirstChild("VexoraUI") then
    game.CoreGui.VexoraUI:Destroy()
end

local VexoraUI = Instance.new("ScreenGui")
VexoraUI.Name = "VexoraUI"
VexoraUI.ResetOnSpawn = false
VexoraUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
VexoraUI.Parent = game.CoreGui

-- Main container with blur effect
local MainContainer = Instance.new("Frame")
MainContainer.Name = "MainContainer"
MainContainer.Size = UDim2.new(0, 700, 0, 450)
MainContainer.Position = UDim2.new(0.5, -350, 0.5, -225)
MainContainer.BackgroundColor3 = Color3.fromRGB(25, 25, 35)
MainContainer.BorderSizePixel = 0
MainContainer.ClipsDescendants = true
MainContainer.Parent = VexoraUI

-- Add rounded corners
local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0, 10)
UICorner.Parent = MainContainer

-- Add a gradient
local UIGradient = Instance.new("UIGradient")
UIGradient.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.fromRGB(30, 30, 45)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(20, 20, 30))
})
UIGradient.Rotation = 45
UIGradient.Parent = MainContainer

-- Add a stroke
local UIStroke = Instance.new("UIStroke")
UIStroke.Color = Color3.fromRGB(100, 90, 255)
UIStroke.Thickness = 2
UIStroke.Parent = MainContainer

-- Header
local Header = Instance.new("Frame")
Header.Name = "Header"
Header.Size = UDim2.new(1, 0, 0, 50)
Header.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
Header.BackgroundTransparency = 0.2
Header.BorderSizePixel = 0
Header.Parent = MainContainer

local HeaderCorner = Instance.new("UICorner")
HeaderCorner.CornerRadius = UDim.new(0, 10)
HeaderCorner.Parent = Header

-- Title
local Title = Instance.new("TextLabel")
Title.Name = "Title"
Title.Size = UDim2.new(0, 200, 0, 50)
Title.Position = UDim2.new(0, 20, 0, 0)
Title.BackgroundTransparency = 1
Title.Text = "VEXORA"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextSize = 24
Title.Font = Enum.Font.GothamBold
Title.TextXAlignment = Enum.TextXAlignment.Left
Title.Parent = Header

-- Version
local Version = Instance.new("TextLabel")
Version.Name = "Version"
Version.Size = UDim2.new(0, 100, 0, 20)
Version.Position = UDim2.new(0, 180, 0, 15)
Version.BackgroundTransparency = 1
Version.Text = "v2.0"
Version.TextColor3 = Color3.fromRGB(150, 150, 255)
Version.TextSize = 14
Version.Font = Enum.Font.GothamSemibold
Version.Parent = Header

-- Close button
local CloseButton = Instance.new("TextButton")
CloseButton.Name = "CloseButton"
CloseButton.Size = UDim2.new(0, 30, 0, 30)
CloseButton.Position = UDim2.new(1, -40, 0, 10)
CloseButton.BackgroundColor3 = Color3.fromRGB(255, 80, 80)
CloseButton.Text = ""
CloseButton.Parent = Header

local CloseCorner = Instance.new("UICorner")
CloseCorner.CornerRadius = UDim.new(1, 0)
CloseCorner.Parent = CloseButton

local CloseIcon = Instance.new("TextLabel")
CloseIcon.Size = UDim2.new(1, 0, 1, 0)
CloseIcon.BackgroundTransparency = 1
CloseIcon.Text = "×"
CloseIcon.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseIcon.TextSize = 24
CloseIcon.Font = Enum.Font.GothamBold
CloseIcon.Parent = CloseButton

-- Minimize button
local MinimizeButton = Instance.new("TextButton")
MinimizeButton.Name = "MinimizeButton"
MinimizeButton.Size = UDim2.new(0, 30, 0, 30)
MinimizeButton.Position = UDim2.new(1, -80, 0, 10)
MinimizeButton.BackgroundColor3 = Color3.fromRGB(255, 200, 80)
MinimizeButton.Text = ""
MinimizeButton.Parent = Header

local MinimizeCorner = Instance.new("UICorner")
MinimizeCorner.CornerRadius = UDim.new(1, 0)
MinimizeCorner.Parent = MinimizeButton

local MinimizeIcon = Instance.new("TextLabel")
MinimizeIcon.Size = UDim2.new(1, 0, 1, 0)
MinimizeIcon.BackgroundTransparency = 1
MinimizeIcon.Text = "-"
MinimizeIcon.TextColor3 = Color3.fromRGB(255, 255, 255)
MinimizeIcon.TextSize = 24
MinimizeIcon.Font = Enum.Font.GothamBold
MinimizeIcon.Parent = MinimizeButton

-- Sidebar
local Sidebar = Instance.new("Frame")
Sidebar.Name = "Sidebar"
Sidebar.Size = UDim2.new(0, 180, 1, -50)
Sidebar.Position = UDim2.new(0, 0, 0, 50)
Sidebar.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
Sidebar.BackgroundTransparency = 0.5
Sidebar.BorderSizePixel = 0
Sidebar.Parent = MainContainer

-- Logo
local LogoContainer = Instance.new("Frame")
LogoContainer.Name = "LogoContainer"
LogoContainer.Size = UDim2.new(0, 100, 0, 100)
LogoContainer.Position = UDim2.new(0.5, -50, 0, 20)
LogoContainer.BackgroundColor3 = Color3.fromRGB(30, 30, 45)
LogoContainer.BackgroundTransparency = 0.5
LogoContainer.BorderSizePixel = 0
LogoContainer.Parent = Sidebar

local LogoCorner = Instance.new("UICorner")
LogoCorner.CornerRadius = UDim.new(1, 0)
LogoCorner.Parent = LogoContainer

local LogoGradient = Instance.new("UIGradient")
LogoGradient.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.fromRGB(100, 90, 255)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(150, 100, 255))
})
LogoGradient.Rotation = 45
LogoGradient.Parent = LogoContainer

local LogoText = Instance.new("TextLabel")
LogoText.Size = UDim2.new(1, 0, 1, 0)
LogoText.BackgroundTransparency = 1
LogoText.Text = "V"
LogoText.TextColor3 = Color3.fromRGB(255, 255, 255)
LogoText.TextSize = 48
LogoText.Font = Enum.Font.GothamBold
LogoText.Parent = LogoContainer

-- Navigation buttons
local function CreateNavButton(name, position, icon)
    local Button = Instance.new("TextButton")
    Button.Name = name .. "Button"
    Button.Size = UDim2.new(0.9, 0, 0, 40)
    Button.Position = UDim2.new(0.05, 0, 0, position)
    Button.BackgroundColor3 = Color3.fromRGB(40, 40, 60)
    Button.BackgroundTransparency = 0.8
    Button.Text = "  " .. name
    Button.TextColor3 = Color3.fromRGB(200, 200, 200)
    Button.TextSize = 16
    Button.Font = Enum.Font.GothamSemibold
    Button.TextXAlignment = Enum.TextXAlignment.Left
    Button.Parent = Sidebar
    
    local ButtonCorner = Instance.new("UICorner")
    ButtonCorner.CornerRadius = UDim.new(0, 8)
    ButtonCorner.Parent = Button
    
    local IconLabel = Instance.new("TextLabel")
    IconLabel.Size = UDim2.new(0, 20, 0, 20)
    IconLabel.Position = UDim2.new(0, 10, 0.5, -10)
    IconLabel.BackgroundTransparency = 1
    IconLabel.Text = icon
    IconLabel.TextColor3 = Color3.fromRGB(150, 150, 255)
    IconLabel.TextSize = 18
    IconLabel.Font = Enum.Font.GothamBold
    IconLabel.Parent = Button
    
    return Button
end

local HomeButton = CreateNavButton("Home", 140, "🏠")
local CombatButton = CreateNavButton("Combat", 190, "⚔️")
local VisualButton = CreateNavButton("Visual", 240, "👁️")
local MiscButton = CreateNavButton("Misc", 290, "⚙️")
local SettingsButton = CreateNavButton("Settings", 340, "🔧")

-- Highlight the Combat button
CombatButton.BackgroundTransparency = 0.5
CombatButton.TextColor3 = Color3.fromRGB(255, 255, 255)

-- Content area
local ContentArea = Instance.new("Frame")
ContentArea.Name = "ContentArea"
ContentArea.Size = UDim2.new(1, -190, 1, -60)
ContentArea.Position = UDim2.new(0, 185, 0, 55)
ContentArea.BackgroundTransparency = 1
ContentArea.Parent = MainContainer

-- Combat tab content
local CombatTab = Instance.new("Frame")
CombatTab.Name = "CombatTab"
CombatTab.Size = UDim2.new(1, 0, 1, 0)
CombatTab.BackgroundTransparency = 1
CombatTab.Visible = true
CombatTab.Parent = ContentArea

-- Section: Auto Parry
local AutoParrySection = Instance.new("Frame")
AutoParrySection.Name = "AutoParrySection"
AutoParrySection.Size = UDim2.new(0.48, 0, 0, 200)
AutoParrySection.BackgroundColor3 = Color3.fromRGB(30, 30, 45)
AutoParrySection.BackgroundTransparency = 0.5
AutoParrySection.BorderSizePixel = 0
AutoParrySection.Parent = CombatTab

local AutoParrySectionCorner = Instance.new("UICorner")
AutoParrySectionCorner.CornerRadius = UDim.new(0, 10)
AutoParrySectionCorner.Parent = AutoParrySection

local AutoParryTitle = Instance.new("TextLabel")
AutoParryTitle.Size = UDim2.new(1, 0, 0, 30)
AutoParryTitle.Position = UDim2.new(0, 0, 0, 5)
AutoParryTitle.BackgroundTransparency = 1
AutoParryTitle.Text = "Auto Parry"
AutoParryTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
AutoParryTitle.TextSize = 18
AutoParryTitle.Font = Enum.Font.GothamBold
AutoParryTitle.Parent = AutoParrySection

-- Auto Parry Toggle
local function CreateToggle(parent, position, default)
    local ToggleContainer = Instance.new("Frame")
    ToggleContainer.Size = UDim2.new(0, 60, 0, 30)
    ToggleContainer.Position = position
    ToggleContainer.BackgroundColor3 = Color3.fromRGB(40, 40, 60)
    ToggleContainer.BorderSizePixel = 0
    ToggleContainer.Parent = parent
    
    local ToggleCorner = Instance.new("UICorner")
    ToggleCorner.CornerRadius = UDim.new(1, 0)
    ToggleCorner.Parent = ToggleContainer
    
    local ToggleCircle = Instance.new("Frame")
    ToggleCircle.Size = UDim2.new(0, 24, 0, 24)
    ToggleCircle.Position = default and UDim2.new(0, 33, 0, 3) or UDim2.new(0, 3, 0, 3)
    ToggleCircle.BackgroundColor3 = default and Color3.fromRGB(150, 150, 255) or Color3.fromRGB(200, 200, 200)
    ToggleCircle.BorderSizePixel = 0
    ToggleCircle.Parent = ToggleContainer
    
    local ToggleCircleCorner = Instance.new("UICorner")
    ToggleCircleCorner.CornerRadius = UDim.new(1, 0)
    ToggleCircleCorner.Parent = ToggleCircle
    
    local ToggleButton = Instance.new("TextButton")
    ToggleButton.Size = UDim2.new(1, 0, 1, 0)
    ToggleButton.BackgroundTransparency = 1
    ToggleButton.Text = ""
    ToggleButton.Parent = ToggleContainer
    
    local isEnabled = default
    
    ToggleButton.MouseButton1Click:Connect(function()
        isEnabled = not isEnabled
        
        local newPosition = isEnabled and UDim2.new(0, 33, 0, 3) or UDim2.new(0, 3, 0, 3)
        local newColor = isEnabled and Color3.fromRGB(150, 150, 255) or Color3.fromRGB(200, 200, 200)
        
        TweenService:Create(ToggleCircle, TweenInfo.new(0.2), {
            Position = newPosition,
            BackgroundColor3 = newColor
        }):Play()
        
        return isEnabled
    end)
    
    return ToggleButton, isEnabled, ToggleCircle
end

local AutoParryToggleLabel = Instance.new("TextLabel")
AutoParryToggleLabel.Size = UDim2.new(0, 100, 0, 30)
AutoParryToggleLabel.Position = UDim2.new(0, 20, 0, 40)
AutoParryToggleLabel.BackgroundTransparency = 1
AutoParryToggleLabel.Text = "Enabled:"
AutoParryToggleLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
AutoParryToggleLabel.TextSize = 16
AutoParryToggleLabel.Font = Enum.Font.GothamSemibold
AutoParryToggleLabel.TextXAlignment = Enum.TextXAlignment.Left
AutoParryToggleLabel.Parent = AutoParrySection

local AutoParryToggle, _, AutoParryToggleCircle = CreateToggle(AutoParrySection, UDim2.new(1, -80, 0, 40), IsAutoParryEnabled)

-- Curve Type Dropdown
local CurveTypeLabel = Instance.new("TextLabel")
CurveTypeLabel.Size = UDim2.new(0, 100, 0, 30)
CurveTypeLabel.Position = UDim2.new(0, 20, 0, 80)
CurveTypeLabel.BackgroundTransparency = 1
CurveTypeLabel.Text = "Curve Type:"
CurveTypeLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
CurveTypeLabel.TextSize = 16
CurveTypeLabel.Font = Enum.Font.GothamSemibold
CurveTypeLabel.TextXAlignment = Enum.TextXAlignment.Left
CurveTypeLabel.Parent = AutoParrySection

local CurveTypeDropdown = Instance.new("TextButton")
CurveTypeDropdown.Size = UDim2.new(0, 150, 0, 30)
CurveTypeDropdown.Position = UDim2.new(0, 20, 0, 110)
CurveTypeDropdown.BackgroundColor3 = Color3.fromRGB(40, 40, 60)
CurveTypeDropdown.Text = "  " .. Parry_Type
CurveTypeDropdown.TextColor3 = Color3.fromRGB(200, 200, 200)
CurveTypeDropdown.TextSize = 14
CurveTypeDropdown.Font = Enum.Font.GothamSemibold
CurveTypeDropdown.TextXAlignment = Enum.TextXAlignment.Left
CurveTypeDropdown.Parent = AutoParrySection

local CurveTypeCorner = Instance.new("UICorner")
CurveTypeCorner.CornerRadius = UDim.new(0, 6)
CurveTypeCorner.Parent = CurveTypeDropdown

local CurveTypeArrow = Instance.new("TextLabel")
CurveTypeArrow.Size = UDim2.new(0, 20, 0, 20)
CurveTypeArrow.Position = UDim2.new(1, -25, 0.5, -10)
CurveTypeArrow.BackgroundTransparency = 1
CurveTypeArrow.Text = "▼"
CurveTypeArrow.TextColor3 = Color3.fromRGB(150, 150, 255)
CurveTypeArrow.TextSize = 14
CurveTypeArrow.Font = Enum.Font.GothamBold
CurveTypeArrow.Parent = CurveTypeDropdown

local CurveTypeOptions = Instance.new("Frame")
CurveTypeOptions.Size = UDim2.new(0, 150, 0, 210)
CurveTypeOptions.Position = UDim2.new(0, 20, 0, 145)
CurveTypeOptions.BackgroundColor3 = Color3.fromRGB(40, 40, 60)
CurveTypeOptions.BorderSizePixel = 0
CurveTypeOptions.Visible = false
CurveTypeOptions.ZIndex = 10
CurveTypeOptions.Parent = AutoParrySection

local CurveTypeOptionsCorner = Instance.new("UICorner")
CurveTypeOptionsCorner.CornerRadius = UDim.new(0, 6)
CurveTypeOptionsCorner.Parent = CurveTypeOptions

local curveTypes = {"Custom", "Backwards", "Random", "Straight", "Up", "Right", "Left"}

for i, curveType in ipairs(curveTypes) do
    local Option = Instance.new("TextButton")
    Option.Size = UDim2.new(1, 0, 0, 30)
    Option.Position = UDim2.new(0, 0, 0, (i-1) * 30)
    Option.BackgroundTransparency = 0.8
    Option.BackgroundColor3 = Color3.fromRGB(40, 40, 60)
    Option.Text = "  " .. curveType
    Option.TextColor3 = Color3.fromRGB(200, 200, 200)
    Option.TextSize = 14
    Option.Font = Enum.Font.GothamSemibold
    Option.TextXAlignment = Enum.TextXAlignment.Left
    Option.ZIndex = 11
    Option.Parent = CurveTypeOptions
    
    Option.MouseButton1Click:Connect(function()
        Parry_Type = curveType
        CurveTypeDropdown.Text = "  " .. curveType
        CurveTypeOptions.Visible = false
        updateParryData(curveType)
    end)
end

CurveTypeDropdown.MouseButton1Click:Connect(function()
    CurveTypeOptions.Visible = not CurveTypeOptions.Visible
end)

-- Parry Stats
local ParryStatsLabel = Instance.new("TextLabel")
ParryStatsLabel.Size = UDim2.new(0, 200, 0, 30)
ParryStatsLabel.Position = UDim2.new(0, 20, 0, 150)
ParryStatsLabel.BackgroundTransparency = 1
ParryStatsLabel.Text = "Successful Parries: 0"
ParryStatsLabel.TextColor3 = Color3.fromRGB(150, 255, 150)
ParryStatsLabel.TextSize = 14
ParryStatsLabel.Font = Enum.Font.GothamSemibold
ParryStatsLabel.TextXAlignment = Enum.TextXAlignment.Left
ParryStatsLabel.Parent = AutoParrySection

-- Section: Parameters
local ParamsSection = Instance.new("Frame")
ParamsSection.Name = "ParamsSection"
ParamsSection.Size = UDim2.new(0.48, 0, 0, 200)
ParamsSection.Position = UDim2.new(0.52, 0, 0, 0)
ParamsSection.BackgroundColor3 = Color3.fromRGB(30, 30, 45)
ParamsSection.BackgroundTransparency = 0.5
ParamsSection.BorderSizePixel = 0
ParamsSection.Parent = CombatTab

local ParamsSectionCorner = Instance.new("UICorner")
ParamsSectionCorner.CornerRadius = UDim.new(0, 10)
ParamsSectionCorner.Parent = ParamsSection

local ParamsTitle = Instance.new("TextLabel")
ParamsTitle.Size = UDim2.new(1, 0, 0, 30)
ParamsTitle.Position = UDim2.new(0, 0, 0, 5)
ParamsTitle.BackgroundTransparency = 1
ParamsTitle.Text = "Parameters"
ParamsTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
ParamsTitle.TextSize = 18
ParamsTitle.Font = Enum.Font.GothamBold
ParamsTitle.Parent = ParamsSection

-- Create sliders
local function CreateSlider(parent, title, min, max, default, position)
    local SliderContainer = Instance.new("Frame")
    SliderContainer.Size = UDim2.new(0.9, 0, 0, 50)
    SliderContainer.Position = position
    SliderContainer.BackgroundTransparency = 1
    SliderContainer.Parent = parent
    
    local SliderTitle = Instance.new("TextLabel")
    SliderTitle.Size = UDim2.new(0.7, 0, 0, 20)
    SliderTitle.BackgroundTransparency = 1
    SliderTitle.Text = title
    SliderTitle.TextColor3 = Color3.fromRGB(200, 200, 200)
    SliderTitle.TextSize = 14
    SliderTitle.Font = Enum.Font.GothamSemibold
    SliderTitle.TextXAlignment = Enum.TextXAlignment.Left
    SliderTitle.Parent = SliderContainer
    
    local SliderValue = Instance.new("TextLabel")
    SliderValue.Size = UDim2.new(0.3, 0, 0, 20)
    SliderValue.Position = UDim2.new(0.7, 0, 0, 0)
    SliderValue.BackgroundTransparency = 1
    SliderValue.Text = tostring(default)
    SliderValue.TextColor3 = Color3.fromRGB(150, 150, 255)
    SliderValue.TextSize = 14
    SliderValue.Font = Enum.Font.GothamSemibold
    SliderValue.TextXAlignment = Enum.TextXAlignment.Right
    SliderValue.Parent = SliderContainer
    
    local SliderBG = Instance.new("Frame")
    SliderBG.Size = UDim2.new(1, 0, 0, 6)
    SliderBG.Position = UDim2.new(0, 0, 0, 30)
    SliderBG.BackgroundColor3 = Color3.fromRGB(40, 40, 60)
    SliderBG.BorderSizePixel = 0
    SliderBG.Parent = SliderContainer
    
    local SliderBGCorner = Instance.new("UICorner")
    SliderBGCorner.CornerRadius = UDim.new(0, 3)
    SliderBGCorner.Parent = SliderBG
    
    local SliderFill = Instance.new("Frame")
    SliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
    SliderFill.BackgroundColor3 = Color3.fromRGB(150, 150, 255)
    SliderFill.BorderSizePixel = 0
    SliderFill.Parent = SliderBG
    
    local SliderFillCorner = Instance.new("UICorner")
    SliderFillCorner.CornerRadius = UDim.new(0, 3)
    SliderFillCorner.Parent = SliderFill
    
    local SliderButton = Instance.new("TextButton")
    SliderButton.Size = UDim2.new(1, 0, 1, 0)
    SliderButton.BackgroundTransparency = 1
    SliderButton.Text = ""
    SliderButton.Parent = SliderBG
    
    local value = default
    
    local function updateSlider(input)
        local pos = math.clamp((input.Position.X - SliderBG.AbsolutePosition.X) / SliderBG.AbsoluteSize.X, 0, 1)
        value = min + ((max - min) * pos)
        value = math.floor(value * 10) / 10 -- Round to 1 decimal place
        SliderValue.Text = tostring(value)
        SliderFill.Size = UDim2.new(pos, 0, 1, 0)
        return value
    end
    
    SliderButton.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            local connection
            connection = RunService.RenderStepped:Connect(function()
                value = updateSlider(input)
            end)
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    connection:Disconnect()
                end
            end)
        end
    end)
    
    SliderButton.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            value = updateSlider(input)
        end
    end)
    
    return SliderContainer, value
end

-- Create parameter sliders
local ParryRadiusSlider, _ = CreateSlider(ParamsSection, "Parry Radius", 5, 50, ParryRadius, UDim2.new(0.05, 0, 0, 40))
local PredictionTimeSlider, _ = CreateSlider(ParamsSection, "Prediction Time", 0.1, 1, PredictionTime, UDim2.new(0.05, 0, 0, 100))

-- Section: Advanced Settings
local AdvancedSection = Instance.new("Frame")
AdvancedSection.Name = "AdvancedSection"
AdvancedSection.Size = UDim2.new(1, 0, 0, 180)
AdvancedSection.Position = UDim2.new(0, 0, 0, 210)
AdvancedSection.BackgroundColor3 = Color3.fromRGB(30, 30, 45)
AdvancedSection.BackgroundTransparency = 0.5
AdvancedSection.BorderSizePixel = 0
AdvancedSection.Parent = CombatTab

local AdvancedSectionCorner = Instance.new("UICorner")
AdvancedSectionCorner.CornerRadius = UDim.new(0, 10)
AdvancedSectionCorner.Parent = AdvancedSection

local AdvancedTitle = Instance.new("TextLabel")
AdvancedTitle.Size = UDim2.new(1, 0, 0, 30)
AdvancedTitle.Position = UDim2.new(0, 0, 0, 5)
AdvancedTitle.BackgroundTransparency = 1
AdvancedTitle.Text = "Advanced Settings"
AdvancedTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
AdvancedTitle.TextSize = 18
AdvancedTitle.Font = Enum.Font.GothamBold
AdvancedTitle.Parent = AdvancedSection

-- Create checkboxes
local function CreateCheckbox(parent, text, position, default)
    local CheckboxContainer = Instance.new("Frame")
    CheckboxContainer.Size = UDim2.new(0.45, 0, 0, 30)
    CheckboxContainer.Position = position
    CheckboxContainer.BackgroundTransparency = 1
    CheckboxContainer.Parent = parent
    
    local CheckboxLabel = Instance.new("TextLabel")
    CheckboxLabel.Size = UDim2.new(0, 150, 0, 30)
    CheckboxLabel.BackgroundTransparency = 1
    CheckboxLabel.Text = text
    CheckboxLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    CheckboxLabel.TextSize = 14
    CheckboxLabel.Font = Enum.Font.GothamSemibold
    CheckboxLabel.TextXAlignment = Enum.TextXAlignment.Left
    CheckboxLabel.Parent = CheckboxContainer
    
    local CheckboxButton = Instance.new("TextButton")
    CheckboxButton.Size = UDim2.new(0, 24, 0, 24)
    CheckboxButton.Position = UDim2.new(1, -30, 0.5, -12)
    CheckboxButton.BackgroundColor3 = Color3.fromRGB(40, 40, 60)
    CheckboxButton.BorderSizePixel = 0
    CheckboxButton.Text = ""
    CheckboxButton.Parent = CheckboxContainer
    
    local CheckboxCorner = Instance.new("UICorner")
    CheckboxCorner.CornerRadius = UDim.new(0, 4)
    CheckboxCorner.Parent = CheckboxButton
    
    local CheckMark = Instance.new("TextLabel")
    CheckMark.Size = UDim2.new(1, 0, 1, 0)
    CheckMark.BackgroundTransparency = 1
    CheckMark.Text = "✓"
    CheckMark.TextColor3 = Color3.fromRGB(150, 150, 255)
    CheckMark.TextSize = 18
    CheckMark.Font = Enum.Font.GothamBold
    CheckMark.Visible = default
    CheckMark.Parent = CheckboxButton
    
    local isChecked = default
    
    CheckboxButton.MouseButton1Click:Connect(function()
        isChecked = not isChecked
        CheckMark.Visible = isChecked
        return isChecked
    end)
    
    return CheckboxContainer, isChecked
end

-- Create advanced checkboxes
local AutoJumpCheckbox, _ = CreateCheckbox(AdvancedSection, "Auto Jump", UDim2.new(0.03, 0, 0, 40), false)
local AntiAFKCheckbox, _ = CreateCheckbox(AdvancedSection, "Anti AFK", UDim2.new(0.03, 0, 0, 80), true)
local AutoClaimCheckbox, _ = CreateCheckbox(AdvancedSection, "Auto Claim Rewards", UDim2.new(0.03, 0, 0, 120), false)
local VisualFXCheckbox, _ = CreateCheckbox(AdvancedSection, "Visual Effects", UDim2.new(0.52, 0, 0, 40), true)
local AutoVoteCheckbox, _ = CreateCheckbox(AdvancedSection, "Auto Vote", UDim2.new(0.52, 0, 0, 80), false)
local ServerHopCheckbox, _ = CreateCheckbox(AdvancedSection, "Auto Server Hop", UDim2.new(0.52, 0, 0, 120), false)

-- Make the UI draggable
local UserInputService = game:GetService("UserInputService")
local dragging
local dragInput
local dragStart
local startPos

local function update(input)
    local delta = input.Position - dragStart
    MainContainer.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

Header.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = MainContainer.Position
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

Header.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        update(input)
    end
end)

-- Connect UI elements to functionality
AutoParryToggle.MouseButton1Click:Connect(function()
    IsAutoParryEnabled = not IsAutoParryEnabled
    if IsAutoParryEnabled then
        TweenService:Create(AutoParryToggleCircle, TweenInfo.new(0.2), {
            Position = UDim2.new(0, 33, 0, 3),
            BackgroundColor3 = Color3.fromRGB(150, 150, 255)
        }):Play()
    else
        TweenService:Create(AutoParryToggleCircle, TweenInfo.new(0.2), {
            Position = UDim2.new(0, 3, 0, 3),
            BackgroundColor3 = Color3.fromRGB(200, 200, 200)
        }):Play()
    end
end)

-- Update parry stats
RunService.Heartbeat:Connect(function()
    ParryStatsLabel.Text = "Successful Parries: " .. Parries
end)

-- Close button functionality
CloseButton.MouseButton1Click:Connect(function()
    VexoraUI:Destroy()
end)

-- Minimize button functionality
local isMinimized = false
MinimizeButton.MouseButton1Click:Connect(function()
    isMinimized = not isMinimized
    if isMinimized then
        TweenService:Create(MainContainer, TweenInfo.new(0.3), {
            Size = UDim2.new(0, 700, 0, 50)
        }):Play()
        ContentArea.Visible = false
        Sidebar.Visible = false
    else
        TweenService:Create(MainContainer, TweenInfo.new(0.3), {
            Size = UDim2.new(0, 700, 0, 450)
        }):Play()
        ContentArea.Visible = true
        Sidebar.Visible = true
    end
end)

-- Fade in animation
MainContainer.BackgroundTransparency = 1
Header.BackgroundTransparency = 1
Sidebar.BackgroundTransparency = 1
AutoParrySection.BackgroundTransparency = 1
ParamsSection.BackgroundTransparency = 1
AdvancedSection.BackgroundTransparency = 1

TweenService:Create(MainContainer, TweenInfo.new(0.5), {BackgroundTransparency = 0}):Play()
TweenService:Create(Header, TweenInfo.new(0.5), {BackgroundTransparency = 0.2}):Play()
TweenService:Create(Sidebar, TweenInfo.new(0.5), {BackgroundTransparency = 0.5}):Play()
TweenService:Create(AutoParrySection, TweenInfo.new(0.5), {BackgroundTransparency = 0.5}):Play()
TweenService:Create(ParamsSection, TweenInfo.new(0.5), {BackgroundTransparency = 0.5}):Play()
TweenService:Create(AdvancedSection, TweenInfo.new(0.5), {BackgroundTransparency = 0.5}):Play()

-- Initialize the UI with current values
updateParryData(Parry_Type)