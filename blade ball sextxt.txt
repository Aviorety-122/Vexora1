-- Load required services
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualInputManager = game:GetService("VirtualInputManager")
local Debris = game:GetService("Debris")
local TweenService = game:GetService("TweenService")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:FindFirstChildOfClass("Humanoid")
local Alive = workspace:WaitForChild("Alive")
local Camera = workspace.CurrentCamera

-- Enhanced variables for remote events and parry control
local Remotes = {}
local Parry_Key = nil
local Parry_Data = nil
local Parry_Type = "Custom"
local Cooldown = 0
local IsParried = false
local Connection = nil
local IsAutoParryEnabled = false
local ParryRadius = 15
local PredictionTime = 0.2  -- Improved prediction time
local Parries = 0
local Last_Input = UserInputService:GetLastInputType()
local AntiCurveEnabled = true  -- New anti-curve feature

-- Capture remotes via debug (unchanged)
task.spawn(function()
    for _, Value in pairs(getgc()) do
        if type(Value) == "function" and islclosure(Value) then
            if debug.getupvalues(Value) then
                local Protos = debug.getprotos(Value)
                local Upvalues = debug.getupvalues(Value)
                local Constants = debug.getconstants(Value)
                if #Protos == 4 and #Upvalues == 24 and #Constants == 104 then
                    Remotes[debug.getupvalue(Value, 16)] = debug.getconstant(Value, 62)
                    Parry_Key = debug.getupvalue(Value, 17)
                    Remotes[debug.getupvalue(Value, 18)] = debug.getconstant(Value, 64)
                    Remotes[debug.getupvalue(Value, 19)] = debug.getconstant(Value, 65)
                    break
                end
            end
        end
    end
end)

-- Improved ball detection
local function GetBall()
    local balls = workspace:FindFirstChild("Balls")
    if not balls then return nil end
    
    -- First try to find the real ball by attribute
    for _, Ball in ipairs(balls:GetChildren()) do
        if Ball:GetAttribute("realBall") then
            return Ball
        end
    end
    
    -- If no ball with attribute found, try to find by velocity
    for _, Ball in ipairs(balls:GetChildren()) do
        if Ball:IsA("BasePart") and Ball:FindFirstChild("zoomies") then
            return Ball
        end
    end
    
    return nil
end

local function ResetConnection()
    if Connection then
        Connection:Disconnect()
        Connection = nil
    end
end

-- Enhanced ball monitoring
workspace:WaitForChild("Balls").ChildAdded:Connect(function(ball)
    task.wait(0.1) -- Wait for attributes to be set
    local Ball = GetBall()
    if not Ball then return end
    
    ResetConnection()
    Connection = Ball:GetAttributeChangedSignal("target"):Connect(function()
        IsParried = false
    end)
end)

-- Improved ball position prediction with anti-curve
local function PredictBallPosition(Ball, TimeAhead)
    local Velocity = (Ball:FindFirstChild("zoomies") and Ball.zoomies.VectorVelocity) or Vector3.new(0, 0, 0)
    
    -- Anti-curve logic
    if AntiCurveEnabled then
        -- Calculate the direction to the player
        local HRP = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if HRP then
            local dirToPlayer = (HRP.Position - Ball.Position).Unit
            local currentVelDir = Velocity.Unit
            
            -- Calculate dot product to see if ball is curving
            local dotProduct = dirToPlayer:Dot(currentVelDir)
            
            -- If ball is curving (not directly heading to player)
            if dotProduct < 0.9 then
                -- Adjust velocity to account for curve
                local adjustedVelocity = Velocity:Lerp(dirToPlayer * Velocity.Magnitude, 0.5)
                return Ball.Position + adjustedVelocity * TimeAhead
            end
        end
    end
    
    return Ball.Position + Velocity * TimeAhead
end

-- Improved auto parry with better timing
local function AutoParry()
    if not IsAutoParryEnabled then return end
    
    local Ball = GetBall()
    local Character = LocalPlayer.Character
    if not Ball or not Character then return end
    
    local HRP = Character:FindFirstChild("HumanoidRootPart")
    if not HRP then return end

    -- Check if ball is targeting the player
    if Ball:GetAttribute("target") == LocalPlayer.Name and not IsParried then
        local PredictedPosition = PredictBallPosition(Ball, PredictionTime)
        local DistanceToPredicted = (HRP.Position - PredictedPosition).Magnitude
        
        -- Calculate dynamic parry radius based on ball velocity
        local Velocity = (Ball:FindFirstChild("zoomies") and Ball.zoomies.VectorVelocity) or Vector3.new(0, 0, 0)
        local VelocityMagnitude = Velocity.Magnitude
        local DynamicRadius = ParryRadius + (VelocityMagnitude / 10)
        
        if DistanceToPredicted <= DynamicRadius then
            -- Fire all parry remotes
            for Remote, Args in pairs(Remotes) do
                Remote:FireServer(Args, Parry_Key, Parry_Data[1], Parry_Data[2], Parry_Data[3], Parry_Data[4])
            end
            
            IsParried = true
            Cooldown = tick()
            Parries = Parries + 1
        end
    end
    
    -- Reset parry state after cooldown
    if IsParried and (tick() - Cooldown) >= 1 then
        IsParried = false
    end
end

RunService.PreSimulation:Connect(AutoParry)

-- Update parry data based on selected curve type
local function updateParryData(parryType)
    local Vector3_Mouse_Location
    if Last_Input == Enum.UserInputType.MouseButton1 or
       Last_Input == Enum.UserInputType.MouseButton2 or
       Last_Input == Enum.UserInputType.Keyboard then
        local Mouse_Location = UserInputService:GetMouseLocation()
        Vector3_Mouse_Location = {Mouse_Location.X, Mouse_Location.Y}
    else
        Vector3_Mouse_Location = {Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2}
    end
    
    local Events = {}
    for _, v in pairs(Alive:GetChildren()) do
        if v:FindFirstChild("PrimaryPart") then
            Events[tostring(v)] = Camera:WorldToScreenPoint(v.PrimaryPart.Position)
        end
    end

    local data  
    if parryType == "Custom" then  
        data = {0, Camera.CFrame, Events, Vector3_Mouse_Location}  
    elseif parryType == "Backwards" then  
        data = {0, CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position - (Camera.CFrame.LookVector * 1000)), Events, Vector3_Mouse_Location}  
    elseif parryType == "Random" then  
        data = {0, CFrame.new(Camera.CFrame.Position, Vector3.new(math.random(-3000,3000), math.random(-3000,3000), math.random(-3000,3000))), Events, Vector3_Mouse_Location}  
    elseif parryType == "Straight" then  
        data = {0, CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + (Camera.CFrame.LookVector * 1000)), Events, Vector3_Mouse_Location}  
    elseif parryType == "Up" then  
        data = {0, CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + (Camera.CFrame.UpVector * 1000)), Events, Vector3_Mouse_Location}  
    elseif parryType == "Right" then  
        data = {0, CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + (Camera.CFrame.RightVector * 1000)), Events, Vector3_Mouse_Location}  
    elseif parryType == "Left" then  
        data = {0, CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position - (Camera.CFrame.RightVector * 1000)), Events, Vector3_Mouse_Location}  
    else  
        data = {0, Camera.CFrame, Events, Vector3_Mouse_Location}  
    end  

    Parry_Data = data
end

-- Initialize parry data
updateParryData(Parry_Type)

-- Create UI exactly like the screenshot
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "SimplinessUI"
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

-- Main frame
local MainFrame = Instance.new("Frame")
MainFrame.Name = "MainFrame"
MainFrame.Size = UDim2.new(0, 700, 0, 400)
MainFrame.Position = UDim2.new(0.5, -350, 0.5, -200)
MainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
MainFrame.BorderSizePixel = 0
MainFrame.Parent = ScreenGui

local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0, 10)
UICorner.Parent = MainFrame

-- Header
local Header = Instance.new("Frame")
Header.Name = "Header"
Header.Size = UDim2.new(1, 0, 0, 50)
Header.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
Header.BorderSizePixel = 0
Header.Parent = MainFrame

local HeaderCorner = Instance.new("UICorner")
HeaderCorner.CornerRadius = UDim.new(0, 10)
HeaderCorner.Parent = Header

-- Fix the bottom corners of header
local HeaderFix = Instance.new("Frame")
HeaderFix.Size = UDim2.new(1, 0, 0, 10)
HeaderFix.Position = UDim2.new(0, 0, 1, -10)
HeaderFix.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
HeaderFix.BorderSizePixel = 0
HeaderFix.Parent = Header

-- Back button
local BackButton = Instance.new("TextButton")
BackButton.Size = UDim2.new(0, 30, 0, 30)
BackButton.Position = UDim2.new(0, 15, 0, 10)
BackButton.BackgroundTransparency = 1
BackButton.Text = "‚Üê"
BackButton.TextColor3 = Color3.fromRGB(200, 200, 200)
BackButton.TextSize = 24
BackButton.Font = Enum.Font.GothamSemibold
BackButton.Parent = Header

-- Title
local Title = Instance.new("TextLabel")
Title.Size = UDim2.new(0, 200, 0, 30)
Title.Position = UDim2.new(0, 50, 0, 10)
Title.BackgroundTransparency = 1
Title.Text = "Simpliness"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextSize = 18
Title.Font = Enum.Font.GothamSemibold
Title.TextXAlignment = Enum.TextXAlignment.Left
Title.Parent = Header

-- Window controls (green, yellow, red dots)
local function CreateDot(position, color)
    local Dot = Instance.new("Frame")
    Dot.Size = UDim2.new(0, 12, 0, 12)
    Dot.Position = position
    Dot.BackgroundColor3 = color
    Dot.BorderSizePixel = 0
    Dot.Parent = Header
    
    local DotCorner = Instance.new("UICorner")
    DotCorner.CornerRadius = UDim.new(1, 0)
    DotCorner.Parent = Dot
    
    return Dot
end

CreateDot(UDim2.new(1, -40, 0, 19), Color3.fromRGB(255, 95, 87))
CreateDot(UDim2.new(1, -60, 0, 19), Color3.fromRGB(255, 189, 46))
CreateDot(UDim2.new(1, -80, 0, 19), Color3.fromRGB(39, 201, 63))

-- Content area
local ContentArea = Instance.new("Frame")
ContentArea.Name = "ContentArea"
ContentArea.Size = UDim2.new(1, 0, 1, -50)
ContentArea.Position = UDim2.new(0, 0, 0, 50)
ContentArea.BackgroundTransparency = 1
ContentArea.Parent = MainFrame

-- Sidebar
local Sidebar = Instance.new("Frame")
Sidebar.Name = "Sidebar"
Sidebar.Size = UDim2.new(0, 150, 1, 0)
Sidebar.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
Sidebar.BorderSizePixel = 0
Sidebar.Parent = ContentArea

local SidebarCorner = Instance.new("UICorner")
SidebarCorner.CornerRadius = UDim.new(0, 10)
SidebarCorner.Parent = Sidebar

-- Fix the top corners of sidebar
local SidebarFix = Instance.new("Frame")
SidebarFix.Size = UDim2.new(1, 0, 0, 10)
SidebarFix.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
SidebarFix.BorderSizePixel = 0
SidebarFix.Parent = Sidebar

-- Active selection indicator
local ActiveIndicator = Instance.new("Frame")
ActiveIndicator.Name = "ActiveIndicator"
ActiveIndicator.Size = UDim2.new(0, 4, 0, 30)
ActiveIndicator.Position = UDim2.new(0, 0, 0, 10)
ActiveIndicator.BackgroundColor3 = Color3.fromRGB(200, 100, 255)
ActiveIndicator.BorderSizePixel = 0
ActiveIndicator.Parent = Sidebar

-- Sidebar buttons
local function CreateSidebarButton(text, position, isActive)
    local Button = Instance.new("TextButton")
    Button.Size = UDim2.new(1, 0, 0, 30)
    Button.Position = UDim2.new(0, 0, 0, position)
    Button.BackgroundTransparency = 1
    Button.Text = text
    Button.TextColor3 = isActive and Color3.fromRGB(255, 255, 255) or Color3.fromRGB(150, 150, 150)
    Button.TextSize = 14
    Button.Font = Enum.Font.GothamSemibold
    Button.TextXAlignment = Enum.TextXAlignment.Left
    Button.Parent = Sidebar
    
    -- Add padding to text
    local UIPadding = Instance.new("UIPadding")
    UIPadding.PaddingLeft = UDim.new(0, 20)
    UIPadding.Parent = Button
    
    return Button
end

CreateSidebarButton("Aimbot", 10, true)
CreateSidebarButton("Aimbot", 50, false)
CreateSidebarButton("Aimbot", 90, false)
CreateSidebarButton("Aimbot", 130, false)

-- Main content
local MainContent = Instance.new("Frame")
MainContent.Name = "MainContent"
MainContent.Size = UDim2.new(1, -160, 1, -10)
MainContent.Position = UDim2.new(0, 155, 0, 5)
MainContent.BackgroundTransparency = 1
MainContent.Parent = ContentArea

-- Content header
local ContentHeader = Instance.new("TextLabel")
ContentHeader.Size = UDim2.new(1, 0, 0, 30)
ContentHeader.BackgroundTransparency = 1
ContentHeader.Text = "Aimbot"
ContentHeader.TextColor3 = Color3.fromRGB(255, 255, 255)
ContentHeader.TextSize = 18
ContentHeader.Font = Enum.Font.GothamSemibold
ContentHeader.TextXAlignment = Enum.TextXAlignment.Left
ContentHeader.Parent = MainContent

-- Create toggle switch
local function CreateToggle(parent, text, position, defaultState)
    local Container = Instance.new("Frame")
    Container.Size = UDim2.new(1, 0, 0, 40)
    Container.Position = position
    Container.BackgroundTransparency = 1
    Container.Parent = parent
    
    local Label = Instance.new("TextLabel")
    Label.Size = UDim2.new(0.5, 0, 1, 0)
    Label.BackgroundTransparency = 1
    Label.Text = text
    Label.TextColor3 = Color3.fromRGB(200, 200, 200)
    Label.TextSize = 14
    Label.Font = Enum.Font.GothamSemibold
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = Container
    
    local ToggleBackground = Instance.new("Frame")
    ToggleBackground.Size = UDim2.new(0, 50, 0, 24)
    ToggleBackground.Position = UDim2.new(1, -60, 0.5, -12)
    ToggleBackground.BackgroundColor3 = defaultState and Color3.fromRGB(200, 100, 255) or Color3.fromRGB(60, 60, 60)
    ToggleBackground.BorderSizePixel = 0
    ToggleBackground.Parent = Container
    
    local ToggleCorner = Instance.new("UICorner")
    ToggleCorner.CornerRadius = UDim.new(1, 0)
    ToggleCorner.Parent = ToggleBackground
    
    local ToggleCircle = Instance.new("Frame")
    ToggleCircle.Size = UDim2.new(0, 18, 0, 18)
    ToggleCircle.Position = defaultState and UDim2.new(1, -21, 0.5, -9) or UDim2.new(0, 3, 0.5, -9)
    ToggleCircle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    ToggleCircle.BorderSizePixel = 0
    ToggleCircle.Parent = ToggleBackground
    
    local ToggleCircleCorner = Instance.new("UICorner")
    ToggleCircleCorner.CornerRadius = UDim.new(1, 0)
    ToggleCircleCorner.Parent = ToggleCircle
    
    local isEnabled = defaultState
    
    local ToggleButton = Instance.new("TextButton")
    ToggleButton.Size = UDim2.new(1, 0, 1, 0)
    ToggleButton.BackgroundTransparency = 1
    ToggleButton.Text = ""
    ToggleButton.Parent = ToggleBackground
    
    ToggleButton.MouseButton1Click:Connect(function()
        isEnabled = not isEnabled
        
        local targetPosition = isEnabled and UDim2.new(1, -21, 0.5, -9) or UDim2.new(0, 3, 0.5, -9)
        local targetColor = isEnabled and Color3.fromRGB(200, 100, 255) or Color3.fromRGB(60, 60, 60)
        
        TweenService:Create(ToggleCircle, TweenInfo.new(0.2), {Position = targetPosition}):Play()
        TweenService:Create(ToggleBackground, TweenInfo.new(0.2), {BackgroundColor3 = targetColor}):Play()
        
        if text == "Kavo Style" then
            -- Handle Kavo Style toggle
        elseif text == "Auto Parry" then
            IsAutoParryEnabled = isEnabled
        elseif text == "Anti Curve" then
            AntiCurveEnabled = isEnabled
        end
    end)
    
    return Container, isEnabled
end

-- Create text input
local function CreateTextInput(parent, text, position, defaultValue)
    local Container = Instance.new("Frame")
    Container.Size = UDim2.new(1, 0, 0, 40)
    Container.Position = position
    Container.BackgroundTransparency = 1
    Container.Parent = parent
    
    local Label = Instance.new("TextLabel")
    Label.Size = UDim2.new(0.5, 0, 1, 0)
    Label.BackgroundTransparency = 1
    Label.Text = text
    Label.TextColor3 = Color3.fromRGB(200, 200, 200)
    Label.TextSize = 14
    Label.Font = Enum.Font.GothamSemibold
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = Container
    
    local InputBackground = Instance.new("Frame")
    InputBackground.Size = UDim2.new(0, 200, 0, 30)
    InputBackground.Position = UDim2.new(1, -210, 0.5, -15)
    InputBackground.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    InputBackground.BorderSizePixel = 0
    InputBackground.Parent = Container
    
    local InputCorner = Instance.new("UICorner")
    InputCorner.CornerRadius = UDim.new(0, 5)
    InputCorner.Parent = InputBackground
    
    local TextBox = Instance.new("TextBox")
    TextBox.Size = UDim2.new(1, -10, 1, 0)
    TextBox.Position = UDim2.new(0, 5, 0, 0)
    TextBox.BackgroundTransparency = 1
    TextBox.Text = defaultValue
    TextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    TextBox.TextSize = 14
    TextBox.Font = Enum.Font.Gotham
    TextBox.TextXAlignment = Enum.TextXAlignment.Left
    TextBox.ClearTextOnFocus = false
    TextBox.Parent = InputBackground
    
    return Container, TextBox
end

-- Create keybind
local function CreateKeybind(parent, text, position, defaultKey)
    local Container = Instance.new("Frame")
    Container.Size = UDim2.new(1, 0, 0, 40)
    Container.Position = position
    Container.BackgroundTransparency = 1
    Container.Parent = parent
    
    local Label = Instance.new("TextLabel")
    Label.Size = UDim2.new(0.5, 0, 1, 0)
    Label.BackgroundTransparency = 1
    Label.Text = text
    Label.TextColor3 = Color3.fromRGB(200, 200, 200)
    Label.TextSize = 14
    Label.Font = Enum.Font.GothamSemibold
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = Container
    
    local KeyLabel = Instance.new("TextLabel")
    KeyLabel.Size = UDim2.new(0, 100, 0, 30)
    KeyLabel.Position = UDim2.new(1, -110, 0.5, -15)
    KeyLabel.BackgroundTransparency = 1
    KeyLabel.Text = defaultKey
    KeyLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    KeyLabel.TextSize = 14
    KeyLabel.Font = Enum.Font.Gotham
    KeyLabel.TextXAlignment = Enum.TextXAlignment.Right
    KeyLabel.Parent = Container
    
    return Container, KeyLabel
end

-- Create dropdown
local function CreateDropdown(parent, text, position, options, defaultOption)
    local Container = Instance.new("Frame")
    Container.Size = UDim2.new(1, 0, 0, 40)
    Container.Position = position
    Container.BackgroundTransparency = 1
    Container.Parent = parent
    
    local Label = Instance.new("TextLabel")
    Label.Size = UDim2.new(0.5, 0, 1, 0)
    Label.BackgroundTransparency = 1
    Label.Text = text
    Label.TextColor3 = Color3.fromRGB(200, 200, 200)
    Label.TextSize = 14
    Label.Font = Enum.Font.GothamSemibold
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = Container
    
    local DropdownBackground = Instance.new("Frame")
    DropdownBackground.Size = UDim2.new(0, 200, 0, 30)
    DropdownBackground.Position = UDim2.new(1, -210, 0.5, -15)
    DropdownBackground.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    DropdownBackground.BorderSizePixel = 0
    DropdownBackground.Parent = Container
    
    local DropdownCorner = Instance.new("UICorner")
    DropdownCorner.CornerRadius = UDim.new(0, 5)
    DropdownCorner.Parent = DropdownBackground
    
    local SelectedOption = Instance.new("TextLabel")
    SelectedOption.Size = UDim2.new(1, -30, 1, 0)
    SelectedOption.Position = UDim2.new(0, 10, 0, 0)
    SelectedOption.BackgroundTransparency = 1
    SelectedOption.Text = defaultOption
    SelectedOption.TextColor3 = Color3.fromRGB(255, 255, 255)
    SelectedOption.TextSize = 14
    SelectedOption.Font = Enum.Font.Gotham
    SelectedOption.TextXAlignment = Enum.TextXAlignment.Left
    SelectedOption.Parent = DropdownBackground
    
    local ArrowIcon = Instance.new("TextLabel")
    ArrowIcon.Size = UDim2.new(0, 20, 0, 20)
    ArrowIcon.Position = UDim2.new(1, -25, 0.5, -10)
    ArrowIcon.BackgroundTransparency = 1
    ArrowIcon.Text = "‚ñº"
    ArrowIcon.TextColor3 = Color3.fromRGB(200, 200, 200)
    ArrowIcon.TextSize = 12
    ArrowIcon.Font = Enum.Font.Gotham
    ArrowIcon.Parent = DropdownBackground
    
    local DropdownButton = Instance.new("TextButton")
    DropdownButton.Size = UDim2.new(1, 0, 1, 0)
    DropdownButton.BackgroundTransparency = 1
    DropdownButton.Text = ""
    DropdownButton.Parent = DropdownBackground
    
    return Container, SelectedOption
end

-- Create slider
local function CreateSlider(parent, text, position, min, max, default)
    local Container = Instance.new("Frame")
    Container.Size = UDim2.new(1, 0, 0, 40)
    Container.Position = position
    Container.BackgroundTransparency = 1
    Container.Parent = parent
    
    local Label = Instance.new("TextLabel")
    Label.Size = UDim2.new(0.5, 0, 1, 0)
    Label.BackgroundTransparency = 1
    Label.Text = text
    Label.TextColor3 = Color3.fromRGB(200, 200, 200)
    Label.TextSize = 14
    Label.Font = Enum.Font.GothamSemibold
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = Container
    
    local ValueLabel = Instance.new("TextLabel")
    ValueLabel.Size = UDim2.new(0, 50, 0, 30)
    ValueLabel.Position = UDim2.new(1, -60, 0.5, -15)
    ValueLabel.BackgroundTransparency = 1
    ValueLabel.Text = tostring(default)
    ValueLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    ValueLabel.TextSize = 14
    ValueLabel.Font = Enum.Font.Gotham
    ValueLabel.TextXAlignment = Enum.TextXAlignment.Right
    ValueLabel.Parent = Container
    
    local SliderBackground = Instance.new("Frame")
    SliderBackground.Size = UDim2.new(1, -70, 0, 6)
    SliderBackground.Position = UDim2.new(0, 0, 0.8, 0)
    SliderBackground.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    SliderBackground.BorderSizePixel = 0
    SliderBackground.Parent = Container
    
    local SliderBackgroundCorner = Instance.new("UICorner")
    SliderBackgroundCorner.CornerRadius = UDim.new(1, 0)
    SliderBackgroundCorner.Parent = SliderBackground
    
    local SliderFill = Instance.new("Frame")
    SliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
    SliderFill.BackgroundColor3 = Color3.fromRGB(200, 100, 255)
    SliderFill.BorderSizePixel = 0
    SliderFill.Parent = SliderBackground
    
    local SliderFillCorner = Instance.new("UICorner")
    SliderFillCorner.CornerRadius = UDim.new(1, 0)
    SliderFillCorner.Parent = SliderFill
    
    local SliderKnob = Instance.new("Frame")
    SliderKnob.Size = UDim2.new(0, 16, 0, 16)
    SliderKnob.Position = UDim2.new((default - min) / (max - min), -8, 0.5, -8)
    SliderKnob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    SliderKnob.BorderSizePixel = 0
    SliderKnob.ZIndex = 2
    SliderKnob.Parent = SliderBackground
    
    local SliderKnobCorner = Instance.new("UICorner")
    SliderKnobCorner.CornerRadius = UDim.new(1, 0)
    SliderKnobCorner.Parent = SliderKnob
    
    local SliderButton = Instance.new("TextButton")
    SliderButton.Size = UDim2.new(1, 0, 1, 0)
    SliderButton.BackgroundTransparency = 1
    SliderButton.Text = ""
    SliderButton.Parent = SliderBackground
    
    local value = default
    
    local function updateSlider(input)
        local pos = math.clamp((input.Position.X - SliderBackground.AbsolutePosition.X) / SliderBackground.AbsoluteSize.X, 0, 1)
        value = math.floor(min + ((max - min) * pos))
        ValueLabel.Text = tostring(value)
        SliderFill.Size = UDim2.new(pos, 0, 1, 0)
        SliderKnob.Position = UDim2.new(pos, -8, 0.5, -8)
        
        if text == "Test Slider" then
            -- Handle slider value change
            ParryRadius = value
        end
    end
    
    SliderButton.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            local connection
            connection = RunService.RenderStepped:Connect(function()
                local mousePos = UserInputService:GetMouseLocation()
                local input = {Position = Vector2.new(mousePos.X, mousePos.Y)}
                updateSlider(input)
            end)
            
            UserInputService.InputEnded:Connect(function(inputEnd)
                if inputEnd.UserInputType == Enum.UserInputType.MouseButton1 then
                    if connection then
                        connection:Disconnect()
                    end
                end
            end)
            
            updateSlider(input)
        end
    end)
    
    return Container, value
end

-- Add UI elements
local KavoStyleToggle, _ = CreateToggle(MainContent, "Kavo Style", UDim2.new(0, 0, 0, 50), true)
local MonTextbox, TextboxInput = CreateTextInput(MainContent, "Mon Textbox", UDim2.new(0, 0, 0, 100), "aadas")
local ToggleAimbot, KeybindLabel = CreateKeybind(MainContent, "Toggle Aimbot", UDim2.new(0, 0, 0, 150), "Num6")
local SelectOption, OptionLabel = CreateDropdown(MainContent, "Select Option", UDim2.new(0, 0, 0, 200), {"Option 1", "Option 2", "Option 3"}, "Option 1")
local MultiSelect, MultiSelectLabel = CreateDropdown(MainContent, "Multi Select", UDim2.new(0, 0, 0, 250), {"Option 1", "Option 2", "Option 3"}, "Option 1")
local TestSlider, SliderValue = CreateSlider(MainContent, "Test Slider", UDim2.new(0, 0, 0, 300), 0, 100, 56)

-- Add auto parry and anti-curve toggles
local AutoParryToggle, _ = CreateToggle(MainContent, "Auto Parry", UDim2.new(0, 0, 0, 350), true)
local AntiCurveToggle, _ = CreateToggle(MainContent, "Anti Curve", UDim2.new(0, 0, 0, 400), true)

-- Make the UI draggable
local UserInputService = game:GetService("UserInputService")
local dragging
local dragInput
local dragStart
local startPos

local function update(input)
    local delta = input.Position - dragStart
    MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

Header.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = MainFrame.Position
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

Header.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        update(input)
    end
end)

-- Close button functionality
BackButton.MouseButton1Click:Connect(function()
    ScreenGui:Destroy()
end)

-- Initialize auto parry
IsAutoParryEnabled = true

-- Remote event listeners
ReplicatedStorage:WaitForChild("Remotes").ParrySuccess.OnClientEvent:Connect(function()
    if LocalPlayer.Character and LocalPlayer.Character.Parent ~= Alive then
        return
    end
end)

ReplicatedStorage:WaitForChild("Remotes").ParrySuccessAll.OnClientEvent:Connect(function(_, root)
    if root and root.Parent and root.Parent ~= LocalPlayer.Character then
        if root.Parent.Parent ~= Alive then
            return
        end
    end
end)

-- Make the UI visible with a fade-in effect
MainFrame.BackgroundTransparency = 1
Header.BackgroundTransparency = 1
Sidebar.BackgroundTransparency = 1

TweenService:Create(MainFrame, TweenInfo.new(0.5), {BackgroundTransparency = 0}):Play()
TweenService:Create(Header, TweenInfo.new(0.5), {BackgroundTransparency = 0}):Play()
TweenService:Create(Sidebar, TweenInfo.new(0.5), {BackgroundTransparency = 0}):Play()