getgenv().namehub = "niggerware"
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = game:GetService("Players").LocalPlayer
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local CoreGui = game:GetService("CoreGui")
local Lighting = game:GetService("Lighting")

local Mouse = LocalPlayer:GetMouse()

local Library = {
    connections = {},
    Flags = {},
    Enabled = true,
    slider_drag = false,
    core = nil,
    dragging = false,
    drag_position = nil,
    start_position = nil,
}

--// Create folder for saving flags
if not isfolder("cac hub") then
    makefolder("cac hub")
end

--// Disconnect all connections
function Library:disconnect()
    for _, connection in pairs(self.connections) do
        if connection then
            connection:Disconnect()
        end
    end
    self.connections = {}
end

--// Clear existing UI
function Library:clear()
    for _, object in pairs(CoreGui:GetChildren()) do
        if object.Name == "cac" then
            object:Destroy()
        end
    end
end

--// Check if UI exists
function Library:exist()
    return self.core and self.core.Parent
end

--// Save flags to file
function Library:save_flags()
    if not self:exist() then return end
    local flags = HttpService:JSONEncode(self.Flags)
    writefile(`cac hub/{game.GameId}.lua`, flags)
end

--// Load flags from file
function Library:load_flags()
    if not isfile(`cac hub/{game.GameId}.lua`) then
        self:save_flags()
        return
    end
    local flags = readfile(`cac hub/{game.GameId}.lua`)
    if flags then
        self.Flags = HttpService:JSONDecode(flags)
    else
        self:save_flags()
    end
end

--// Create blur effect
local blurEffect
function Library:create_blur()
    blurEffect = Instance.new("BlurEffect")
    blurEffect.Size = 0
    blurEffect.Parent = Lighting
    TweenService:Create(blurEffect, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), { Size = 12 }):Play()
end

function Library:remove_blur()
    if blurEffect then
        TweenService:Create(blurEffect, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), { Size = 0 }):Play()
        task.delay(0.5, function()
            if blurEffect then
                blurEffect:Destroy()
                blurEffect = nil
            end
        end)
    end
end

--// Open UI with animation
function Library:open()
    self.Container.Visible = true
    self.Shadow.Visible = true
    self.Mobile.Modal = true
    self:create_blur()

    TweenService:Create(self.Container, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {
        Size = UDim2.new(0, 699, 0, 426)
    }):Play()

    TweenService:Create(self.Shadow, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {
        Size = UDim2.new(0, 776, 0, 509)
    }):Play()
end

--// Close UI with animation
function Library:close()
    TweenService:Create(self.Shadow, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {
        Size = UDim2.new(0, 0, 0, 0)
    }):Play()

    local main_tween = TweenService:Create(self.Container, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {
        Size = UDim2.new(0, 0, 0, 0)
    })

    main_tween:Play()
    main_tween.Completed:Once(function()
        if self.Enabled then return end
        self.Container.Visible = false
        self.Shadow.Visible = false
        self.Mobile.Modal = false
        self:remove_blur()
    end)
end

--// Drag functionality
function Library:drag(input, container)
    if not self.drag_position or not self.start_position then return end
    local delta = input.Position - self.drag_position
    local position = UDim2.new(
        self.start_position.X.Scale,
        self.start_position.X.Offset + delta.X,
        self.start_position.Y.Scale,
        self.start_position.Y.Offset + delta.Y
    )

    TweenService:Create(container.Container, TweenInfo.new(0.2), { Position = position }):Play()
    TweenService:Create(container.Shadow, TweenInfo.new(0.2), { Position = position }):Play()
end

--// Toggle visibility
function Library:visible()
    self.Enabled = not self.Enabled
    if self.Enabled then
        self:open()
    else
        self:close()
    end
end

--// Create main UI
function Library:new()
    local container = Instance.new("ScreenGui")
    container.Name = "cac"
    container.Parent = CoreGui
    self.core = container

    --// Shadow
    local Shadow = Instance.new("ImageLabel")
    Shadow.Name = "Shadow"
    Shadow.Parent = container
    Shadow.AnchorPoint = Vector2.new(0.5, 0.5)
    Shadow.BackgroundTransparency = 1
    Shadow.Position = UDim2.new(0.5, 0, 0.5, 0)
    Shadow.Size = UDim2.new(0, 0, 0, 0)
    Shadow.ZIndex = 0
    Shadow.Image = "rbxassetid://17290899982"

    --// Main Container
    local Container = Instance.new("Frame")
    Container.Name = "Container"
    Container.Parent = container
    Container.AnchorPoint = Vector2.new(0.5, 0.5)
    Container.BackgroundColor3 = Color3.fromRGB(19, 20, 24)
    Container.BackgroundTransparency = 0.1
    Container.ClipsDescendants = true
    Container.Position = UDim2.new(0.5, 0, 0.5, 0)
    Container.Size = UDim2.new(0, 0, 0, 0)

    local ContainerCorner = Instance.new("UICorner")
    ContainerCorner.CornerRadius = UDim.new(0, 20)
    ContainerCorner.Parent = Container

    --// Top Bar
    local Top = Instance.new("ImageLabel")
    Top.Name = "Top"
    Top.Parent = Container
    Top.BackgroundTransparency = 1
    Top.Size = UDim2.new(0, 699, 0, 39)
    Top.Image = ""

    local Logo = Instance.new("ImageLabel")
    Logo.Name = "Logo"
    Logo.Parent = Top
    Logo.AnchorPoint = Vector2.new(0.5, 0.5)
    Logo.BackgroundTransparency = 1
    Logo.Position = UDim2.new(0.038, 0, 0.5, 0)
    Logo.Size = UDim2.new(0, 30, 0, 25)
    Logo.Image = ""

    local TextLabel = Instance.new("TextLabel")
    TextLabel.Parent = Top
    TextLabel.AnchorPoint = Vector2.new(0.5, 0.5)
    TextLabel.BackgroundTransparency = 1
    TextLabel.Position = UDim2.new(0.094, 0, 0.5, 0)
    TextLabel.Size = UDim2.new(0, 75, 0, 16)
    TextLabel.FontFace = Font.new("rbxasset://fonts/families/Montserrat.json", Enum.FontWeight.SemiBold)
    TextLabel.Text = getgenv().namehub
    TextLabel.TextColor3 = Color3.fromRGB(145, 123, 172)
    TextLabel.TextScaled = true
    TextLabel.TextXAlignment = Enum.TextXAlignment.Left

    --// Divider Line
    local Line = Instance.new("Frame")
    Line.Name = "Line"
    Line.Parent = Container
    Line.BackgroundColor3 = Color3.fromRGB(27, 28, 33)
    Line.Position = UDim2.new(0.296, 0, 0.092, 0)
    Line.Size = UDim2.new(0, 2, 0, 387)

    --// Tabs
    local tabs = Instance.new("ScrollingFrame")
    tabs.Name = "Tabs"
    tabs.Active = true
    tabs.BackgroundTransparency = 1
    tabs.Position = UDim2.new(0, 0, 0.092, 0)
    tabs.Size = UDim2.new(0, 209, 0, 386)
    tabs.ScrollBarThickness = 0
    tabs.Parent = Container

    local tabslist = Instance.new("UIListLayout")
    tabslist.Parent = tabs
    tabslist.HorizontalAlignment = Enum.HorizontalAlignment.Center
    tabslist.SortOrder = Enum.SortOrder.LayoutOrder
    tabslist.Padding = UDim.new(0, 9)

    local UIPadding = Instance.new("UIPadding")
    UIPadding.Parent = tabs
    UIPadding.PaddingTop = UDim.new(0, 15)

    --// Mobile Button
    local mobile_button = Instance.new("TextButton")
    mobile_button.Name = "Mobile"
    mobile_button.BackgroundColor3 = Color3.fromRGB(27, 28, 33)
    mobile_button.Position = UDim2.new(0.021, 0, 0.918, 0)
    mobile_button.Size = UDim2.new(0, 122, 0, 38)
    mobile_button.AutoButtonColor = false
    mobile_button.Modal = true
    mobile_button.FontFace = Font.new("rbxasset://fonts/families/Montserrat.json", Enum.FontWeight.SemiBold)
    mobile_button.Text = ""
    mobile_button.TextColor3 = Color3.fromRGB(0, 0, 0)
    mobile_button.Parent = container

    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 13)
    UICorner.Parent = mobile_button

    local shadowMobile = Instance.new("ImageLabel")
    shadowMobile.Name = "Shadow"
    shadowMobile.Parent = mobile_button
    shadowMobile.AnchorPoint = Vector2.new(0.5, 0.5)
    shadowMobile.BackgroundTransparency = 1
    shadowMobile.Position = UDim2.new(0.5, 0, 0.5, 0)
    shadowMobile.Size = UDim2.new(0, 144, 0, 58)
    shadowMobile.ZIndex = 0
    shadowMobile.Image = "rbxassetid://17183270335"
    shadowMobile.ImageTransparency = 0.2

    local State = Instance.new("TextLabel")
    State.Name = "State"
    State.Parent = mobile_button
    State.AnchorPoint = Vector2.new(0.5, 0.5)
    State.BackgroundTransparency = 1
    State.Position = UDim2.new(0.646, 0, 0.5, 0)
    State.Size = UDim2.new(0, 64, 0, 15)
    State.FontFace = Font.new("rbxasset://fonts/families/Montserrat.json", Enum.FontWeight.SemiBold)
    State.Text = "Open"
    State.TextColor3 = Color3.fromRGB(145, 123, 172)
    State.TextScaled = true
    State.TextXAlignment = Enum.TextXAlignment.Left

    local Icon = Instance.new("ImageLabel")
    Icon.Name = "Icon"
    Icon.Parent = mobile_button
    Icon.AnchorPoint = Vector2.new(0.5, 0.5)
    Icon.BackgroundTransparency = 1
    Icon.Position = UDim2.new(0.268, 0, 0.5, 0)
    Icon.Size = UDim2.new(0, 15, 0, 15)
    Icon.Image = "rbxassetid://17183279677"

    --// Store references
    self.Container = Container
    self.Shadow = Shadow
    self.Mobile = mobile_button

    --// Drag functionality
    Container.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            self.dragging = true
            self.drag_position = input.Position
            self.start_position = Container.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    self.dragging = false
                    self.drag_position = nil
                    self.start_position = nil
                end
            end)
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            self:drag(input, container)
        end
    end)

    --// Toggle UI with Insert key
    UserInputService.InputBegan:Connect(function(input, process)
        if process then return end
        if not self:exist() then return end
        if input.KeyCode == Enum.KeyCode.Insert then
            self:visible()
        end
    end)

    --// Mobile button toggle
    mobile_button.MouseButton1Click:Connect(function()
        self:visible()
    end)

    --// Initialize flags and clear existing UI
    self:load_flags()
    self:clear()

    --// Tab Module
    local Tab = {}

    function Tab:update_sections(args)
        args.left_section.Visible = true
        args.right_section.Visible = true
        for _, object in pairs(container.Container:GetChildren()) do
            if not object.Name:find("Section") or object == args.left_section or object == args.right_section then
                continue
            end
            object.Visible = false
        end
    end

    function Tab:open_tab(args)
        self:update_sections(args)
        TweenService:Create(args.tab.Fill, TweenInfo.new(0.3), { BackgroundTransparency = 0 }):Play()
        TweenService:Create(args.tab.Glow, TweenInfo.new(0.3), { ImageTransparency = 0 }):Play()
        TweenService:Create(args.tab.TextLabel, TweenInfo.new(0.3), { TextTransparency = 0 }):Play()
        TweenService:Create(args.tab.Logo, TweenInfo.new(0.3), { ImageTransparency = 0 }):Play()

        for _, object in pairs(tabs:GetChildren()) do
            if object.Name ~= "Tab" or object == args.tab then continue end
            TweenService:Create(object.Fill, TweenInfo.new(0.3), { BackgroundTransparency = 1 }):Play()
            TweenService:Create(object.Glow, TweenInfo.new(0.3), { ImageTransparency = 1 }):Play()
            TweenService:Create(object.TextLabel, TweenInfo.new(0.3), { TextTransparency = 0.5 }):Play()
            TweenService:Create(object.Logo, TweenInfo.new(0.3), { ImageTransparency = 0.5 }):Play()
        end
    end

    function Tab:create_tab(name)
        local tab = Instance.new("TextButton")
        tab.Name = "Tab"
        tab.BackgroundColor3 = Color3.fromRGB(27, 28, 33)
        tab.Size = UDim2.new(0, 174, 0, 40)
        tab.ZIndex = 2
        tab.AutoButtonColor = false
        tab.Font = Enum.Font.SourceSans
        tab.Text = ""
        tab.Parent = tabs

        local tabCorner = Instance.new("UICorner")
        tabCorner.CornerRadius = UDim.new(0, 5)
        tabCorner.Parent = tab

        local TextLabel = Instance.new("TextLabel")
        TextLabel.Parent = tab
        TextLabel.AnchorPoint = Vector2.new(0.5, 0.5)
        TextLabel.BackgroundTransparency = 1
        TextLabel.Position = UDim2.new(0.59, 0, 0.5, 0)
        TextLabel.Size = UDim2.new(0, 124, 0, 15)
        TextLabel.ZIndex = 3
        TextLabel.FontFace = Font.new("rbxasset://fonts/families/Montserrat.json", Enum.FontWeight.SemiBold)
        TextLabel.Text = name
        TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        TextLabel.TextScaled = true
        TextLabel.TextTransparency = 0.3
        TextLabel.TextXAlignment = Enum.TextXAlignment.Left

        local Logo = Instance.new("ImageLabel")
        Logo.Name = "Logo"
        Logo.Parent = tab
        Logo.AnchorPoint = Vector2.new(0.5, 0.5)
        Logo.BackgroundTransparency = 1
        Logo.Position = UDim2.new(0.131, 0, 0.5, 0)
        Logo.Size = UDim2.new(0, 17, 0, 17)
        Logo.ZIndex = 3
        Logo.Image = "rbxassetid://17290697757"
        Logo.ImageTransparency = 0.3

        local Glow = Instance.new("ImageLabel")
        Glow.Name = "Glow"
        Glow.Parent = tab
        Glow.AnchorPoint = Vector2.new(0.5, 0.5)
        Glow.BackgroundTransparency = 1
        Glow.Position = UDim2.new(0.5, 0, 0.5, 0)
        Glow.Size = UDim2.new(0, 0, 0, 0)
        Glow.Image = "rbxassetid://17290723539"
        Glow.ImageTransparency = 1

        local Fill = Instance.new("Frame")
        Fill.Name = "Fill"
        Fill.Parent = tab
        Fill.AnchorPoint = Vector2.new(0.5, 0.5)
        Fill.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Fill.BackgroundTransparency = 1
        Fill.Position = UDim2.new(0.5, 0, 0.5, 0)
        Fill.Size = UDim2.new(0, 174, 0, 40)
        Fill.ZIndex = 2

        local UICorner_2 = Instance.new("UICorner")
        UICorner_2.CornerRadius = UDim.new(0, 10)
        UICorner_2.Parent = Fill

        local UIGradient = Instance.new("UIGradient")
        UIGradient.Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0, Color3.fromRGB(145, 123, 172)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(145, 123, 172))
        }
        UIGradient.Rotation = 20
        UIGradient.Parent = Fill

        local left_section = Instance.new("ScrollingFrame")
        left_section.Name = "LeftSection"
        left_section.Active = true
        left_section.BackgroundTransparency = 1
        left_section.Position = UDim2.new(0.326, 0, 0.127, 0)
        left_section.Size = UDim2.new(0, 215, 0, 372)
        left_section.AutomaticCanvasSize = Enum.AutomaticSize.XY
        left_section.ScrollBarThickness = 0
        left_section.Parent = Container

        local leftsectionlist = Instance.new("UIListLayout")
        leftsectionlist.Parent = left_section
        leftsectionlist.HorizontalAlignment = Enum.HorizontalAlignment.Center
        leftsectionlist.SortOrder = Enum.SortOrder.LayoutOrder
        leftsectionlist.Padding = UDim.new(0, 7)

        local right_section = Instance.new("ScrollingFrame")
        right_section.Name = "RightSection"
        right_section.Active = true
        right_section.BackgroundTransparency = 1
        right_section.Position = UDim2.new(0.662, 0, 0.127, 0)
        right_section.Size = UDim2.new(0, 215, 0, 372)
        right_section.AutomaticCanvasSize = Enum.AutomaticSize.XY
        right_section.ScrollBarThickness = 0
        right_section.Parent = Container

        local rightsectionlist = Instance.new("UIListLayout")
        rightsectionlist.Parent = right_section
        rightsectionlist.HorizontalAlignment = Enum.HorizontalAlignment.Center
        rightsectionlist.SortOrder = Enum.SortOrder.LayoutOrder
        rightsectionlist.Padding = UDim.new(0, 7)

        if Container:FindFirstChild("RightSection") then
            left_section.Visible = false
            right_section.Visible = false
        else
            self:open_tab({ tab = tab, left_section = left_section, right_section = right_section })
        end

        tab.MouseButton1Click:Connect(function()
            self:open_tab({ tab = tab, left_section = left_section, right_section = right_section })
        end)

        --// Module for UI elements
        local Module = {}

        function Module:create_title(args)
            local section = args.section == "left" and left_section or right_section
            local title = Instance.new("TextLabel")
            title.Name = "Title"
            title.AnchorPoint = Vector2.new(0.5, 0.5)
            title.BackgroundTransparency = 1
            title.Position = UDim2.new(0.531, 0, 0.14, 0)
            title.Size = UDim2.new(0, 201, 0, 15)
            title.ZIndex = 2
            title.FontFace = Font.new("rbxasset://fonts/families/Montserrat.json", Enum.FontWeight.SemiBold)
            title.TextColor3 = Color3.fromRGB(145, 123, 172)
            title.TextScaled = true
            title.TextXAlignment = Enum.TextXAlignment.Left
            title.Text = args.name
            title.Parent = section
        end

        function Module:enable_toggle(toggle)
            TweenService:Create(toggle.Checkbox.Fill, TweenInfo.new(0.3), { BackgroundTransparency = 0 }):Play()
            TweenService:Create(toggle.Checkbox.Glow, TweenInfo.new(0.3), { ImageTransparency = 0 }):Play()
        end

        function Module:disable_toggle(toggle)
            TweenService:Create(toggle.Checkbox.Fill, TweenInfo.new(0.3), { BackgroundTransparency = 1 }):Play()
            TweenService:Create(toggle.Checkbox.Glow, TweenInfo.new(0.3), { ImageTransparency = 1 }):Play()
        end

        function Module:update_toggle(args)
            if args.state then
                self:enable_toggle(args.toggle)
            else
                self:disable_toggle(args.toggle)
            end
        end

        function Module:create_toggle(args)
            local section = args.section == "left" and left_section or right_section
            local toggle = Instance.new("TextButton")
            toggle.Name = "Toggle"
            toggle.BackgroundColor3 = Color3.fromRGB(27, 28, 33)
            toggle.Size = UDim2.new(0, 215, 0, 37)
            toggle.AutoButtonColor = false
            toggle.Font = Enum.Font.SourceSans
            toggle.Text = ""
            toggle.Parent = section

            local UICorner = Instance.new("UICorner")
            UICorner.CornerRadius = UDim.new(0, 10)
            UICorner.Parent = toggle

            local Checkbox = Instance.new("Frame")
            Checkbox.Name = "Checkbox"
            Checkbox.Parent = toggle
            Checkbox.AnchorPoint = Vector2.new(0.5, 0.5)
            Checkbox.BackgroundColor3 = Color3.fromRGB(22, 23, 27)
            Checkbox.Position = UDim2.new(0.915, 0, 0.5, 0)
            Checkbox.Size = UDim2.new(0, 17, 0, 17)

            local UICorner_2 = Instance.new("UICorner")
            UICorner_2.CornerRadius = UDim.new(0, 4)
            UICorner_2.Parent = Checkbox

            local Glow = Instance.new("ImageLabel")
            Glow.Name = "Glow"
            Glow.Parent = Checkbox
            Glow.AnchorPoint = Vector2.new(0.5, 0.5)
            Glow.BackgroundTransparency = 1
            Glow.Position = UDim2.new(0.5, 0, 0.5, 0)
            Glow.Size = UDim2.new(0, 27, 0, 27)
            Glow.Image = "rbxassetid://17290798394"
            Glow.ImageTransparency = 1

            local Fill = Instance.new("Frame")
            Fill.Name = "Fill"
            Fill.Parent = Checkbox
            Fill.AnchorPoint = Vector2.new(0.5, 0.5)
            Fill.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Fill.BackgroundTransparency = 1
            Fill.Position = UDim2.new(0.5, 0, 0.5, 0)
            Fill.Size = UDim2.new(0, 17, 0, 17)

            local UICorner_3 = Instance.new("UICorner")
            UICorner_3.CornerRadius = UDim.new(0, 4)
            UICorner_3.Parent = Fill

            local UIGradient = Instance.new("UIGradient")
            UIGradient.Color = ColorSequence.new{
                ColorSequenceKeypoint.new(0, Color3.fromRGB(145, 123, 172)),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(145, 123, 172))
            }
            UIGradient.Rotation = 20
            UIGradient.Parent = Fill

            local TextLabel = Instance.new("TextLabel")
            TextLabel.Parent = toggle
            TextLabel.AnchorPoint = Vector2.new(0.5, 0.5)
            TextLabel.BackgroundTransparency = 1
            TextLabel.Position = UDim2.new(0.445, 0, 0.5, 0)
            TextLabel.Size = UDim2.new(0, 164, 0, 15)
            TextLabel.ZIndex = 2
            TextLabel.FontFace = Font.new("rbxasset://fonts/families/Montserrat.json", Enum.FontWeight.SemiBold)
            TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            TextLabel.TextScaled = true
            TextLabel.TextXAlignment = Enum.TextXAlignment.Left
            TextLabel.Text = args.name

            if not Library.Flags[args.flag] then
                Library.Flags[args.flag] = args.enabled
            end

            args.callback(Library.Flags[args.flag])
            self:update_toggle({ state = Library.Flags[args.flag], toggle = toggle })

            toggle.MouseButton1Click:Connect(function()
                Library.Flags[args.flag] = not Library.Flags[args.flag]
                Library:save_flags()
                self:update_toggle({ state = Library.Flags[args.flag], toggle = toggle })
                args.callback(Library.Flags[args.flag])
            end)
        end

        function Module:update_slider(args)
            local result = math.clamp((Mouse.X - args.slider.Box.AbsolutePosition.X) / args.slider.Box.AbsoluteSize.X, 0, 1)
            if not result then return end
            local number = math.floor(((args.maximum_value - args.minimum_value) * result) + args.minimum_value)
            local slider_size = math.clamp(result, 0.001, 0.999)

            args.slider.Box.Fill.UIGradient.Transparency = NumberSequence.new({
                NumberSequenceKeypoint.new(0, 0),
                NumberSequenceKeypoint.new(slider_size, 0),
                NumberSequenceKeypoint.new(math.min(slider_size + 0.001, 1), 1),
                NumberSequenceKeypoint.new(1, 1)
            })

            args.slider.Box.Glow.UIGradient.Transparency = NumberSequence.new({
                NumberSequenceKeypoint.new(0, 0),
                NumberSequenceKeypoint.new(slider_size, 0),
                NumberSequenceKeypoint.new(math.min(slider_size + 0.03, 1), 1),
                NumberSequenceKeypoint.new(1, 1)
            })

            Library.Flags[args.flag] = number
            args.slider.Number.Text = number
            args.callback(number)
        end

        function Module:slider_loop(args)
            Library.slider_drag = true
            while Library.slider_drag do
                self:update_slider(args)
                task.wait()
            end
        end

        function Module:create_slider(args)
            local section = args.section == "left" and left_section or right_section
            local slider = Instance.new("TextButton")
            slider.Name = "Slider"
            slider.BackgroundColor3 = Color3.fromRGB(27, 28, 33)
            slider.Size = UDim2.new(0, 215, 0, 48)
            slider.AutoButtonColor = false
            slider.Font = Enum.Font.SourceSans
            slider.Text = ""
            slider.Parent = section

            local UICorner = Instance.new("UICorner")
            UICorner.CornerRadius = UDim.new(0, 10)
            UICorner.Parent = slider

            local Box = Instance.new("Frame")
            Box.Name = "Box"
            Box.Parent = slider
            Box.AnchorPoint = Vector2.new(0.5, 0.5)
            Box.BackgroundColor3 = Color3.fromRGB(22, 23, 27)
            Box.Position = UDim2.new(0.508, 0, 0.708, 0)
            Box.Size = UDim2.new(0, 192, 0, 6)

            local UICorner_2 = Instance.new("UICorner")
            UICorner_2.CornerRadius = UDim.new(0, 15)
            UICorner_2.Parent = Box

            local Glow = Instance.new("ImageLabel")
            Glow.Name = "Glow"
            Glow.Parent = Box
            Glow.AnchorPoint = Vector2.new(0.5, 0.5)
            Glow.BackgroundTransparency = 1
            Glow.Position = UDim2.new(0.5, 0, 0.5, 0)
            Glow.Size = UDim2.new(0, 204, 0, 17)
            Glow.ZIndex = 2
            Glow.Image = "rbxassetid://17381990533"

            local UIGradient = Instance.new("UIGradient")
            UIGradient.Transparency = NumberSequence.new{
                NumberSequenceKeypoint.new(0, 0),
                NumberSequenceKeypoint.new(0.5, 0),
                NumberSequenceKeypoint.new(0.53, 1),
                NumberSequenceKeypoint.new(1, 1)
            }
            UIGradient.Parent = Glow

            local Fill = Instance.new("ImageLabel")
            Fill.Name = "Fill"
            Fill.Parent = Box
            Fill.AnchorPoint = Vector2.new(0, 0.5)
            Fill.BackgroundColor3 = Color3.fromRGB(145, 123, 172)
            Fill.BackgroundTransparency = 1
            Fill.Position = UDim2.new(0, 0, 0.5, 0)
            Fill.Size = UDim2.new(0, 192, 0, 6)
            Fill.Image = "rbxassetid://17382033116"

            local UICorner_3 = Instance.new("UICorner")
            UICorner_3.CornerRadius = UDim.new(0, 4)
            UICorner_3.Parent = Fill

            local UIGradient_2 = Instance.new("UIGradient")
            UIGradient_2.Transparency = NumberSequence.new{
                NumberSequenceKeypoint.new(0, 0),
                NumberSequenceKeypoint.new(0.5, 0),
                NumberSequenceKeypoint.new(0.5, 1),
                NumberSequenceKeypoint.new(1, 1)
            }
            UIGradient_2.Parent = Fill

            local Hitbox = Instance.new("TextButton")
            Hitbox.Name = "Hitbox"
            Hitbox.Parent = Box
            Hitbox.AnchorPoint = Vector2.new(0.5, 0.5)
            Hitbox.BackgroundTransparency = 1
            Hitbox.Position = UDim2.new(0.5, 0, 0.5, 0)
            Hitbox.Size = UDim2.new(0, 200, 0, 13)
            Hitbox.ZIndex = 3
            Hitbox.AutoButtonColor = false
            Hitbox.Font = Enum.Font.SourceSans
            Hitbox.Text = ""

            local TextLabel = Instance.new("TextLabel")
            TextLabel.Parent = slider
            TextLabel.AnchorPoint = Vector2.new(0.5, 0.5)
            TextLabel.BackgroundTransparency = 1
            TextLabel.Position = UDim2.new(0.415, 0, 0.375, 0)
            TextLabel.Size = UDim2.new(0, 151, 0, 15)
            TextLabel.ZIndex = 2
            TextLabel.FontFace = Font.new("rbxasset://fonts/families/Montserrat.json", Enum.FontWeight.SemiBold)
            TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            TextLabel.TextScaled = true
            TextLabel.TextXAlignment = Enum.TextXAlignment.Left
            TextLabel.Text = args.name

            local Number = Instance.new("TextLabel")
            Number.Name = "Number"
            Number.Parent = slider
            Number.AnchorPoint = Vector2.new(0.5, 0.5)
            Number.BackgroundTransparency = 1
            Number.Position = UDim2.new(0.854, 0, 0.375, 0)
            Number.Size = UDim2.new(0, 38, 0, 15)
            Number.ZIndex = 2
            Number.FontFace = Font.new("rbxasset://fonts/families/Montserrat.json", Enum.FontWeight.SemiBold)
            Number.TextColor3 = Color3.fromRGB(255, 255, 255)
            Number.TextScaled = true
            Number.TextXAlignment = Enum.TextXAlignment.Right
            Number.Text = args.value

            if not Library.Flags[args.flag] then
                Library.Flags[args.flag] = args.value
            end

            slider.Number.Text = Library.Flags[args.flag]
            args.callback(Library.Flags[args.flag])

            slider.Box.Hitbox.MouseButton1Down:Connect(function()
                if Library.slider_drag then return end
                self:slider_loop({
                    slider = slider,
                    flag = args.flag,
                    callback = args.callback,
                    maximum_value = args.maximum_value,
                    minimum_value = args.minimum_value
                })
            end)

            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    Library.slider_drag = false
                    Library:save_flags()
                end
            end)
        end

        function Module:create_dropdown(args)
            local section = args.section == "left" and left_section or right_section
            local list_size = 6
            local open = false

            local option = Instance.new("TextButton")
            option.Name = "Option"
            option.Active = false
            option.AnchorPoint = Vector2.new(0.5, 0.5)
            option.BackgroundTransparency = 1
            option.Position = UDim2.new(0.473, 0, 0.31, 0)
            option.Size = UDim2.new(0, 176, 0, 13)
            option.ZIndex = 2
            option.FontFace = Font.new("rbxasset://fonts/families/Montserrat.json", Enum.FontWeight.SemiBold)
            option.TextColor3 = Color3.fromRGB(255, 255, 255)
            option.TextScaled = true
            option.TextTransparency = 0.5
            option.TextXAlignment = Enum.TextXAlignment.Left

            local dropdown = Instance.new("TextButton")
            dropdown.Name = "Dropdown"
            dropdown.BackgroundColor3 = Color3.fromRGB(27, 28, 33)
            dropdown.Size = UDim2.new(0, 215, 0, 36)
            dropdown.AutoButtonColor = false
            dropdown.Font = Enum.Font.SourceSans
            dropdown.Text = ""
            dropdown.Parent = section

            local UICorner = Instance.new("UICorner")
            UICorner.CornerRadius = UDim.new(0, 10)
            UICorner.Parent = dropdown

            local UIListLayout = Instance.new("UIListLayout")
            UIListLayout.Parent = dropdown
            UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
            UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder

            local UIPadding = Instance.new("UIPadding")
            UIPadding.Parent = dropdown
            UIPadding.PaddingTop = UDim.new(0, 6)

            local Box = Instance.new("Frame")
            Box.Name = "Box"
            Box.Parent = dropdown
            Box.AnchorPoint = Vector2.new(0.5, 0)
            Box.BackgroundColor3 = Color3.fromRGB(22, 23, 27)
            Box.Position = UDim2.new(0.5, 0, 0.15, 0)
            Box.Size = UDim2.new(0, 202, 0, 25)
            Box.ZIndex = 2

            local UICorner_2 = Instance.new("UICorner")
            UICorner_2.CornerRadius = UDim.new(0, 6)
            UICorner_2.Parent = Box

            local Options = Instance.new("Frame")
            Options.Name = "Options"
            Options.Parent = Box
            Options.AnchorPoint = Vector2.new(0.5, 0)
            Options.BackgroundColor3 = Color3.fromRGB(22, 23, 27)
            Options.ClipsDescendants = true
            Options.Position = UDim2.new(0.5, 0, 0.76, 0)
            Options.Size = UDim2.new(0, 202, 0, 0)

            local UICorner_3 = Instance.new("UICorner")
            UICorner_3.CornerRadius = UDim.new(0, 6)
            UICorner_3.Parent = Options

            local UIPadding_2 = Instance.new("UIPadding")
            UIPadding_2.Parent = Options
            UIPadding_2.PaddingLeft = UDim.new(0, 15)
            UIPadding_2.PaddingTop = UDim.new(0, 10)

            local UIListLayout_2 = Instance.new("UIListLayout")
            UIListLayout_2.Parent = Options
            UIListLayout_2.SortOrder = Enum.SortOrder.LayoutOrder
            UIListLayout_2.Padding = UDim.new(0, 10)

            local TextLabel = Instance.new("TextLabel")
            TextLabel.Parent = Box
            TextLabel.AnchorPoint = Vector2.new(0.5, 0.5)
            TextLabel.BackgroundTransparency = 1
            TextLabel.Position = UDim2.new(0.43, 0, 0.5, 0)
            TextLabel.Size = UDim2.new(0, 151, 0, 13)
            TextLabel.ZIndex = 2
            TextLabel.FontFace = Font.new("rbxasset://fonts/families/Montserrat.json", Enum.FontWeight.SemiBold)
            TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            TextLabel.TextScaled = true
            TextLabel.TextXAlignment = Enum.TextXAlignment.Left
            TextLabel.Text = args.name

            local Arrow = Instance.new("ImageLabel")
            Arrow.Name = "Arrow"
            Arrow.Parent = Box
            Arrow.AnchorPoint = Vector2.new(0.5, 0.5)
            Arrow.BackgroundTransparency = 1
            Arrow.Position = UDim2.new(0.92, 0, 0.5, 0)
            Arrow.Size = UDim2.new(0, 12, 0, 12)
            Arrow.ZIndex = 2
            Arrow.Image = "rbxassetid://17400678941"

            local Dropdown = {}

            function Dropdown:open()
                dropdown.Box.TextLabel.Text = Library.Flags[args.flag]
                TweenService:Create(dropdown.Box.Options, TweenInfo.new(0.3), { Size = UDim2.new(0, 202, 0, list_size) }):Play()
                TweenService:Create(dropdown, TweenInfo.new(0.3), { Size = UDim2.new(0, 215, 0, 30 + list_size) }):Play()
                TweenService:Create(dropdown.Box.Arrow, TweenInfo.new(0.3), { Rotation = 180 }):Play()
            end

            function Dropdown:close()
                dropdown.Box.TextLabel.Text = args.name
                TweenService:Create(dropdown.Box.Options, TweenInfo.new(0.3), { Size = UDim2.new(0, 202, 0, 0) }):Play()
                TweenService:Create(dropdown, TweenInfo.new(0.3), { Size = UDim2.new(0, 215, 0, 36) }):Play()
                TweenService:Create(dropdown.Box.Arrow, TweenInfo.new(0.3), { Rotation = 0 }):Play()
            end

            function Dropdown:clear()
                for _, object in pairs(dropdown.Box.Options:GetChildren()) do
                    if object.Name == "Option" then
                        object:Destroy()
                    end
                end
            end

            function Dropdown:select_option(new_option)
                TweenService:Create(new_option, TweenInfo.new(0.3), { TextTransparency = 0 }):Play()
                for _, object in pairs(dropdown.Box.Options:GetChildren()) do
                    if object.Name ~= "Option" or object.Text == Library.Flags[args.flag] then continue end
                    TweenService:Create(object, TweenInfo.new(0.3), { TextTransparency = 0.5 }):Play()
                end
                dropdown.Box.TextLabel.Text = new_option.Text
            end

            function Dropdown:update()
                self:clear()
                list_size = 6
                for _, value in pairs(args.options) do
                    list_size = list_size + 23
                    local new_option = option:Clone()
                    new_option.Parent = dropdown.Box.Options
                    new_option.Text = value
                    if value == Library.Flags[args.flag] then
                        new_option.TextTransparency = 0
                    end
                    new_option.MouseButton1Click:Connect(function()
                        Library.Flags[args.flag] = value
                        dropdown.Box.TextLabel.Text = Library.Flags[args.flag]
                        args.callback(Library.Flags[args.flag])
                        Library:save_flags()
                        self:select_option(new_option)
                    end)
                end
            end

            if not Library.Flags[args.flag] then
                Library.Flags[args.flag] = args.option
            end

            args.callback(Library.Flags[args.flag])
            Dropdown:update()

            dropdown.MouseButton1Click:Connect(function()
                open = not open
                if open then
                    Dropdown:open()
                else
                    Dropdown:close()
                end
            end)

            return Dropdown
        end

        function Module:create_textbox(args)
            local section = args.section == "left" and left_section or right_section
            local textbox = Instance.new("TextButton")
            textbox.Name = "TextBox"
            textbox.BackgroundColor3 = Color3.fromRGB(27, 28, 33)
            textbox.Size = UDim2.new(0, 215, 0, 36)
            textbox.AutoButtonColor = false
            textbox.Font = Enum.Font.SourceSans
            textbox.Text = ""
            textbox.Parent = section

            local UICorner = Instance.new("UICorner")
            UICorner.CornerRadius = UDim.new(0, 10)
            UICorner.Parent = textbox

            local UIListLayout = Instance.new("UIListLayout")
            UIListLayout.Parent = textbox
            UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
            UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder

            local UIPadding = Instance.new("UIPadding")
            UIPadding.Parent = textbox
            UIPadding.PaddingTop = UDim.new(0, 6)

            local Box = Instance.new("Frame")
            Box.Name = "Box"
            Box.Parent = textbox
            Box.AnchorPoint = Vector2.new(0.5, 0)
            Box.BackgroundColor3 = Color3.fromRGB(22, 23, 27)
            Box.Position = UDim2.new(0.5, 0, 0.15, 0)
            Box.Size = UDim2.new(0, 202, 0, 25)
            Box.ZIndex = 2

            local UICorner_2 = Instance.new("UICorner")
            UICorner_2.CornerRadius = UDim.new(0, 6)
            UICorner_2.Parent = Box

            local TextHolder = Instance.new("TextBox")
            TextHolder.Name = "TextHolder"
            TextHolder.Parent = Box
            TextHolder.BackgroundColor3 = Color3.fromRGB(22, 23, 27)
            TextHolder.Position = UDim2.new(0.045, 0, 0.24, 0)
            TextHolder.Size = UDim2.new(0, 182, 0, 13)
            TextHolder.ZIndex = 2
            TextHolder.FontFace = Font.new("rbxasset://fonts/families/Montserrat.json", Enum.FontWeight.SemiBold)
            TextHolder.Text = ""
            TextHolder.TextColor3 = Color3.fromRGB(255, 255, 255)
            TextHolder.TextXAlignment = Enum.TextXAlignment.Left
            TextHolder.PlaceholderText = args.name

            local Textbox = {}
            if not Library.Flags[args.flag] then
                Library.Flags[args.flag] = args.value
            else
                textbox.Box.TextHolder.Text = Library.Flags[args.flag]
            end

            args.callback(Library.Flags[args.flag])
            TextHolder.FocusLost:Connect(function()
                Library.Flags[args.flag] = TextHolder.Text
                args.callback(TextHolder.Text)
                Library:save_flags()
            end)

            function Textbox:update(text)
                TextHolder.Text = text
                args.callback(text)
            end

            return Textbox
        end

        function Module:create_keybind(args)
            local section = args.section == "left" and left_section or right_section
            local keybind = Instance.new("TextButton")
            keybind.Name = "Keybind"
            keybind.BackgroundColor3 = Color3.fromRGB(27, 28, 33)
            keybind.Size = UDim2.new(0, 215, 0, 37)
            keybind.AutoButtonColor = false
            keybind.Font = Enum.Font.SourceSans
            keybind.Text = ""
            keybind.Parent = section

            local UICorner = Instance.new("UICorner")
            UICorner.CornerRadius = UDim.new(0, 10)
            UICorner.Parent = keybind

            local TextLabel = Instance.new("TextLabel")
            TextLabel.Parent = keybind
            TextLabel.AnchorPoint = Vector2.new(0.5, 0.5)
            TextLabel.BackgroundTransparency = 1
            TextLabel.Position = UDim2.new(0.424, 0, 0.5, 0)
            TextLabel.Size = UDim2.new(0, 155, 0, 15)
            TextLabel.ZIndex = 2
            TextLabel.FontFace = Font.new("rbxasset://fonts/families/Montserrat.json", Enum.FontWeight.SemiBold)
            TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            TextLabel.TextScaled = true
            TextLabel.TextXAlignment = Enum.TextXAlignment.Left
            TextLabel.Text = args.name

            local Box = Instance.new("Frame")
            Box.Name = "Box"
            Box.Parent = keybind
            Box.AnchorPoint = Vector2.new(0.5, 0.5)
            Box.BackgroundColor3 = Color3.fromRGB(22, 23, 27)
            Box.Position = UDim2.new(0.875, 0, 0.473, 0)
            Box.Size = UDim2.new(0, 27, 0, 21)

            local UICorner_2 = Instance.new("UICorner")
            UICorner_2.CornerRadius = UDim.new(0, 4)
            UICorner_2.Parent = Box

            local TextLabel_2 = Instance.new("TextLabel")
            TextLabel_2.Parent = Box
            TextLabel_2.AnchorPoint = Vector2.new(0.5, 0.5)
            TextLabel_2.BackgroundTransparency = 1
            TextLabel_2.Position = UDim2.new(0.5, 0, 0.5, 0)
            TextLabel_2.Size = UDim2.new(0, 29, 0, 15)
            TextLabel_2.ZIndex = 2
            TextLabel_2.FontFace = Font.new("rbxasset://fonts/families/Montserrat.json", Enum.FontWeight.SemiBold)
            TextLabel_2.TextColor3 = Color3.fromRGB(255, 255, 255)
            TextLabel_2.TextScaled = true
            TextLabel_2.Text = args.keycode.Name

            if not Library.Flags[args.flag] then
                Library.Flags[args.flag] = args.keycode.Name
            end

            keybind.MouseButton1Click:Connect(function()
                TextLabel_2.Text = "..."
                local input = UserInputService.InputBegan:Wait()
                if input.KeyCode.Name ~= "Unknown" then
                    TextLabel_2.Text = input.KeyCode.Name
                    Library.Flags[args.flag] = input.KeyCode.Name
                    Library:save_flags()
                end
            end)

            UserInputService.InputBegan:Connect(function(current, pressed)
                if not pressed and current.KeyCode.Name == Library.Flags[args.flag] then
                    args.callback(Library.Flags[args.flag])
                end
            end)
        end

        return Module
    end

    return Tab
end

return Library